{"version":3,"sources":["/Users/carpentierxqvier/open-source/react-native-country-picker/src/Emoji.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/ratio.ts","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryTheme.ts","/Users/carpentierxqvier/open-source/react-native-country-picker/src/types.ts","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryService.ts","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryContext.ts","/Users/carpentierxqvier/open-source/react-native-country-picker/src/Flag.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryText.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/FlagButton.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryFilter.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryModal.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CloseButton.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/HeaderModal.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryList.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryPicker.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/index.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/Row.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/App.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/assets/images/close.android.png","/Users/carpentierxqvier/open-source/react-native-country-picker/src/assets/images/close.ios.png"],"names":["Emoji","memo","name","emoji","nodeEmoji","get","Text","allowFontScaling","height","Dimensions","DEFAULT_HEIGHT","Platform","OS","percentage","FlagType","AnimationType","DEFAULT_THEME","primaryColor","primaryColorVariant","backgroundColor","onBackgroundTextColor","fontSize","fontFamily","select","ios","android","web","filterPlaceholderTextColor","activeOpacity","itemHeight","Math","round","DARK_THEME","createTheming","ThemeProvider","useTheme","CountryCodeList","data","fuse","loadData","emojiCountries","undefined","imageCountries","dataType","EMOJI","FLAT","require","getCountryName","countryCode","translation","countries","Error","getCountryCallingCode","callingCode","isCountryPresent","DEFAULT_FUSE_OPTION","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","DEFAULT_COUNTRY_CONTEXT","getImageFlag","flag","getEmojiFlag","getCountries","flagType","countriesRaw","filter","map","cca2","sort","country1","country2","localeCompare","getCountryCurrency","currency","search","options","length","Fuse","result","getLetters","arr","substr","toLocaleUpperCase","l1","l2","Array","from","Set","CountryContext","React","useContext","CountryProvider","Provider","Consumer","styles","StyleSheet","create","container","justifyContent","alignItems","width","marginRight","emojiFlag","default","borderWidth","PixelRatio","borderColor","imageFlag","resizeMode","opacity","ImageFlag","Image","style","source","uri","EmojiFlag","Flag","withEmoji","View","defaultProps","CountryText","props","color","containerWithEmoji","marginTop","containerWithoutEmoji","flagWithSomethingContainer","flexDirection","flexWrap","something","FlagWithSomething","withCountryNameButton","withCurrencyButton","withCallingCodeButton","countryName","FlagButton","onOpen","withSomething","TouchableOpacity","onPress","input","outlineWidth","outlineColor","outlineOffset","CountryFilter","TextInput","testID","autoCorrect","placeholderTextColor","autoFocus","placeholder","flex","CountryModal","children","withModal","content","SafeAreaView","animationType","animated","imageStyle","CloseButtonAndroid","closeImage","image","TouchableNativeFeedback","background","Version","SelectableBackground","SelectableBackgroundBorderless","tintColor","CloseButtonIOS","propTypes","PropTypes","func","any","prototype","HeaderModal","withFilter","closeButtonImage","closeButtonStyle","closeButtonImageStyle","onClose","renderFilter","CloseButton","borderBottomWidth","letters","letter","letterText","textAlign","itemCountry","paddingHorizontal","itemCountryName","list","sep","Letter","scrollTo","key","CountryItem","country","onSelect","withFlag","withCallingCode","withCurrency","extraContent","push","join","numberOfLines","ellipsizeMode","MemoCountryItem","renderItem","item","keyExtractor","ItemSeparatorComponent","borderBottomColor","CountryList","withAlphaFilter","flatListProps","filterFocus","flatListRef","useRef","useState","setLetter","indexLetter","index","indexOf","current","scrollToIndex","useEffect","FlatList","onScrollToIndexFailed","ref","keyboardShouldPersistTaps","initialNumToRender","automaticallyAdjustContentInsets","scrollEventThrottle","getItemLayout","_data","offset","_info","scrollToEnd","ScrollView","contentContainerStyle","CountryPicker","renderButton","renderFlagButton","renderCountryFilter","filterProps","modalProps","handleClose","handleOpen","visible","state","setState","setFilter","onFocus","onBlur","flagProp","setCountries","onRequestClose","onChangeText","value","main","theme","row","Row","fullWidth","padding","paddingVertical","welcome","margin","instructions","marginBottom","Option","onValueChange","title","Switch","App","setCountryCode","setCountry","setWithCountryNameButton","setWithCurrencyButton","setWithCallingCodeButton","setWithFlag","setWithEmoji","setWithFilter","setWithAlphaFilter","setWithCallingCode","setWithCurrency","setWithModal","setVisible","dark","setDark","Button","JSON","stringify","module","exports"],"mappings":"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","file":"static/js/app.a38967bb.chunk.js","sourcesContent":["import React, { memo } from 'react'\nimport { Text } from 'react-native'\nimport nodeEmoji from 'node-emoji'\n\nconst Emoji = memo(({ name }: { name: string }) => {\n  const emoji = nodeEmoji.get(name)\n  return <Text allowFontScaling={false}>{emoji}</Text>\n})\n\nexport { Emoji }\n","import { Dimensions, Platform } from 'react-native'\n\nconst { height } = Dimensions.get('window')\n\n// Remove the status bar height\n// since the modal view does not cover this area\nconst ANDROID_MINUS_HEIGHT = 24\n\nconst DEFAULT_HEIGHT =\n  Platform.OS === 'android' ? height - ANDROID_MINUS_HEIGHT : height\n\nexport const getHeightPercent = (percentage: number) =>\n  Math.round(DEFAULT_HEIGHT * (percentage / 100))\n","import { createTheming } from '@callstack/react-theme-provider'\nimport { Platform } from 'react-native'\nimport { getHeightPercent } from './ratio'\n\nexport const DEFAULT_THEME = {\n  primaryColor: '#ccc',\n  primaryColorVariant: '#eee',\n  backgroundColor: '#ffffff',\n  onBackgroundTextColor: '#000000',\n  fontSize: 16,\n  fontFamily: Platform.select({\n    ios: 'System',\n    android: 'Roboto',\n    web: 'Arial'\n  }),\n  filterPlaceholderTextColor: '#aaa',\n  activeOpacity: 0.5,\n  itemHeight: getHeightPercent(7)\n}\nexport const DARK_THEME = {\n  ...DEFAULT_THEME,\n  primaryColor: '#222',\n  primaryColorVariant: '#444',\n  backgroundColor: '#000',\n  onBackgroundTextColor: '#fff',\n  filterPlaceholderTextColor: '#eee'\n}\nexport type Theme = Partial<typeof DEFAULT_THEME>\n\nconst { ThemeProvider, useTheme } = createTheming<Theme>(DEFAULT_THEME)\n\nexport { ThemeProvider, useTheme }\n","export const CountryCodeList = [\n  'AF',\n  'AL',\n  'DZ',\n  'AS',\n  'AD',\n  'AO',\n  'AI',\n  'AQ',\n  'AG',\n  'AR',\n  'AM',\n  'AW',\n  'AU',\n  'AT',\n  'AZ',\n  'BS',\n  'BH',\n  'BD',\n  'BB',\n  'BY',\n  'BE',\n  'BZ',\n  'BJ',\n  'BM',\n  'BT',\n  'BO',\n  'BA',\n  'BW',\n  'BV',\n  'BR',\n  'IO',\n  'VG',\n  'BN',\n  'BG',\n  'BF',\n  'BI',\n  'KH',\n  'CM',\n  'CA',\n  'CV',\n  'BQ',\n  'KY',\n  'CF',\n  'TD',\n  'CL',\n  'CN',\n  'CX',\n  'CC',\n  'CO',\n  'KM',\n  'CK',\n  'CR',\n  'HR',\n  'CU',\n  'CW',\n  'CY',\n  'CZ',\n  'CD',\n  'DK',\n  'DJ',\n  'DM',\n  'DO',\n  'EC',\n  'EG',\n  'SV',\n  'GQ',\n  'ER',\n  'EE',\n  'SZ',\n  'ET',\n  'FK',\n  'FO',\n  'FJ',\n  'FI',\n  'FR',\n  'GF',\n  'PF',\n  'TF',\n  'GA',\n  'GM',\n  'GE',\n  'DE',\n  'GH',\n  'GI',\n  'GR',\n  'GL',\n  'GD',\n  'GP',\n  'GU',\n  'GT',\n  'GG',\n  'GN',\n  'GW',\n  'GY',\n  'HT',\n  'HM',\n  'HN',\n  'HU',\n  'IS',\n  'IN',\n  'ID',\n  'IR',\n  'IQ',\n  'IE',\n  'IM',\n  'IL',\n  'IT',\n  'CI',\n  'JM',\n  'JP',\n  'JE',\n  'JO',\n  'KZ',\n  'KE',\n  'XK',\n  'KW',\n  'KG',\n  'LA',\n  'LV',\n  'LB',\n  'LS',\n  'LR',\n  'LY',\n  'LI',\n  'LT',\n  'LU',\n  'MO',\n  'MK',\n  'MG',\n  'MW',\n  'MY',\n  'MV',\n  'ML',\n  'MT',\n  'MH',\n  'MQ',\n  'MR',\n  'MU',\n  'YT',\n  'MX',\n  'FM',\n  'MD',\n  'MC',\n  'MN',\n  'ME',\n  'MS',\n  'MA',\n  'MZ',\n  'MM',\n  'NA',\n  'NR',\n  'NP',\n  'NL',\n  'NC',\n  'NZ',\n  'NI',\n  'NE',\n  'NG',\n  'NU',\n  'NF',\n  'KP',\n  'MP',\n  'NO',\n  'OM',\n  'PK',\n  'PW',\n  'PS',\n  'PA',\n  'PG',\n  'PY',\n  'PE',\n  'PH',\n  'PN',\n  'PL',\n  'PT',\n  'PR',\n  'QA',\n  'CG',\n  'RO',\n  'RU',\n  'RW',\n  'RE',\n  'BL',\n  'SH',\n  'KN',\n  'LC',\n  'MF',\n  'PM',\n  'VC',\n  'WS',\n  'SM',\n  'SA',\n  'SN',\n  'RS',\n  'SC',\n  'SL',\n  'SG',\n  'SX',\n  'SK',\n  'SI',\n  'SB',\n  'SO',\n  'ZA',\n  'GS',\n  'KR',\n  'SS',\n  'ES',\n  'LK',\n  'SD',\n  'SR',\n  'SJ',\n  'SE',\n  'CH',\n  'SY',\n  'ST',\n  'TW',\n  'TJ',\n  'TZ',\n  'TH',\n  'TL',\n  'TG',\n  'TK',\n  'TO',\n  'TT',\n  'TN',\n  'TR',\n  'TM',\n  'TC',\n  'TV',\n  'UG',\n  'UA',\n  'AE',\n  'GB',\n  'US',\n  'UM',\n  'VI',\n  'UY',\n  'UZ',\n  'VU',\n  'VA',\n  'VE',\n  'VN',\n  'WF',\n  'EH',\n  'YE',\n  'ZM',\n  'ZW',\n  'KI',\n  'HK',\n  'AX'\n] as const\n\nexport type CountryCode = typeof CountryCodeList[number]\n\nexport type CallingCode = string\n\nexport type CurrencyCode = string\n\nexport type TranslationLanguageCodeMap = {\n  [key in TranslationLanguageCode]: string\n}\nexport interface Country {\n  currency: CurrencyCode[]\n  callingCode: CallingCode[]\n  flag: string\n  name: TranslationLanguageCodeMap | string\n  cca2: CountryCode\n}\n\nexport const TranslationLanguageCodeList = [\n  'common',\n  'cym',\n  'deu',\n  'fra',\n  'hrv',\n  'ita',\n  'jpn',\n  'nld',\n  'por',\n  'rus',\n  'spa',\n  'svk',\n  'fin',\n  'zho',\n  'isr'\n] as const\nexport type TranslationLanguageCode = typeof TranslationLanguageCodeList[number]\n\nexport enum FlagType {\n  FLAT = 'flat',\n  EMOJI = 'emoji'\n}\nexport enum AnimationType {\n  SLIDE = 'slide',\n  FADE = 'fade',\n  NONE = 'none'\n}\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\n","import {\n  CountryCode,\n  Country,\n  TranslationLanguageCode,\n  TranslationLanguageCodeMap,\n  FlagType,\n  CountryCodeList\n} from './types'\nimport Fuse from 'fuse.js'\n\ninterface DataCountry {\n  emojiCountries?: { [key in CountryCode]: Country }\n  imageCountries?: { [key in CountryCode]: Country }\n}\nconst localData: DataCountry = {\n  emojiCountries: undefined,\n  imageCountries: undefined\n}\n\nexport const loadData = ((data: DataCountry) => (\n  dataType: FlagType = FlagType.EMOJI\n) => {\n  switch (dataType) {\n    case FlagType.FLAT:\n      if (!data.imageCountries) {\n        data.imageCountries = require('./assets/data/countries-image.json')\n      }\n      return data.imageCountries\n    default:\n      if (!data.emojiCountries) {\n        data.emojiCountries = require('./assets/data/countries-emoji.json')\n      }\n      return data.emojiCountries\n  }\n})(localData)\n\nexport const getEmojiFlag = (countryCode: CountryCode = 'FR') => {\n  const countries = loadData()\n  if (!countries) {\n    throw new Error('Unable to find emoji because emojiCountries is undefined')\n  }\n  return countries[countryCode].flag\n}\n\nexport const getImageFlag = (countryCode: CountryCode = 'FR') => {\n  const countries = loadData(FlagType.FLAT)\n  if (!countries) {\n    throw new Error('Unable to find image because imageCountries is undefined')\n  }\n  return countries[countryCode].flag\n}\n\nexport const getCountryName = (\n  countryCode: CountryCode = 'FR',\n  translation: TranslationLanguageCode = 'common'\n) => {\n  const countries = loadData()\n  if (!countries) {\n    throw new Error('Unable to find image because imageCountries is undefined')\n  }\n\n  return countries[countryCode].name\n    ? (countries[countryCode].name as TranslationLanguageCodeMap)[translation]\n    : (countries[countryCode].name as TranslationLanguageCodeMap)['common']\n}\n\nexport const getCountryCallingCode = (countryCode: CountryCode) => {\n  const countries = loadData()\n  if (!countries) {\n    throw new Error('Unable to find image because imageCountries is undefined')\n  }\n  return countries[countryCode].callingCode[0]\n}\n\nexport const getCountryCurrency = (countryCode: CountryCode) => {\n  const countries = loadData()\n  if (!countries) {\n    throw new Error('Unable to find image because imageCountries is undefined')\n  }\n  return countries[countryCode].currency[0]\n}\n\nexport const getCountry = (countryCode: CountryCode) => {\n  const countries = loadData()\n  if (!countries) {\n    throw new Error('Unable to find image because imageCountries is undefined')\n  }\n  return countries[countryCode].callingCode[0]\n}\n\nconst isCountryPresent = (countries: { [key in CountryCode]: Country }) => (\n  countryCode: CountryCode\n) => !!countries[countryCode]\n\nexport const getCountries = (\n  flagType: FlagType,\n  translation: TranslationLanguageCode = 'common'\n): Country[] => {\n  const countriesRaw = loadData(flagType)\n  if (!countriesRaw) {\n    return []\n  }\n  const countries = CountryCodeList.filter(isCountryPresent(countriesRaw))\n    .map((cca2: CountryCode) => ({\n      cca2,\n      ...{\n        ...countriesRaw[cca2],\n        name:\n          (countriesRaw[cca2].name as TranslationLanguageCodeMap)[\n            translation\n          ] || (countriesRaw[cca2].name as TranslationLanguageCodeMap)['common']\n      }\n    }))\n    .sort((country1: Country, country2: Country) =>\n      (country1.name as string).localeCompare(country2.name as string)\n    )\n\n  return countries\n}\n\nconst DEFAULT_FUSE_OPTION = {\n  shouldSort: true,\n  threshold: 0.6,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  keys: ['name', 'callingCode']\n}\nlet fuse: Fuse<Country>\nexport const search = (\n  filter: string = '',\n  data: Country[] = [],\n  options: Fuse.FuseOptions<any> = DEFAULT_FUSE_OPTION\n) => {\n  if (data.length === 0) {\n    return []\n  }\n  if (!fuse) {\n    fuse = new Fuse<Country>(data, options)\n  }\n  if (filter && filter !== '') {\n    const result = fuse.search(filter)\n    return result\n  } else {\n    return data\n  }\n}\nconst uniq = (arr: any[]) => Array.from(new Set(arr))\n\nexport const getLetters = () => {\n  const countriesRaw = loadData()\n  if (!countriesRaw) {\n    return []\n  }\n  return uniq(\n    CountryCodeList.filter(isCountryPresent(countriesRaw))\n      .map((countryCode: CountryCode) =>\n        getCountryName(countryCode)\n          .substr(0, 1)\n          .toLocaleUpperCase()\n      )\n      .sort((l1: string, l2: string) => l1.localeCompare(l2))\n  )\n}\n","import * as React from 'react'\nimport { TranslationLanguageCode } from './types'\nimport {\n  getEmojiFlag,\n  getImageFlag,\n  getCountryName,\n  getCountries,\n  getLetters,\n  getCountryCallingCode,\n  getCountryCurrency,\n  search\n} from './CountryService'\n\nexport interface CountryContextParam {\n  translation?: TranslationLanguageCode\n  getCountryName: typeof getCountryName\n  getImageFlag: typeof getImageFlag\n  getEmojiFlag: typeof getEmojiFlag\n  getCountries: typeof getCountries\n  getLetters: typeof getLetters\n  getCountryCallingCode: typeof getCountryCallingCode\n  getCountryCurrency: typeof getCountryCurrency\n  search: typeof search\n}\nexport const DEFAULT_COUNTRY_CONTEXT = {\n  translation: 'common' as TranslationLanguageCode,\n  getCountryName,\n  getImageFlag,\n  getEmojiFlag,\n  getCountries,\n  getCountryCallingCode,\n  getCountryCurrency,\n  search,\n  getLetters\n}\nexport const CountryContext = React.createContext<CountryContextParam>(\n  DEFAULT_COUNTRY_CONTEXT\n)\n\nexport const useContext = () => React.useContext(CountryContext)\n\nexport const {\n  Provider: CountryProvider,\n  Consumer: CountryConsumer\n} = CountryContext\n","import React, { memo } from 'react'\nimport { Emoji } from './Emoji'\nimport { CountryCode } from './types'\nimport { useTheme } from './CountryTheme'\nimport { useContext } from './CountryContext'\nimport {\n  Image,\n  StyleSheet,\n  PixelRatio,\n  Text,\n  View,\n  Platform\n} from 'react-native'\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 30,\n    marginRight: 10\n  },\n  emojiFlag: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: Platform.select({ android: 20, default: 30 }),\n    borderWidth: 1 / PixelRatio.get(),\n    borderColor: 'transparent',\n    backgroundColor: 'transparent'\n  },\n  imageFlag: {\n    resizeMode: 'contain',\n    width: 25,\n    height: 19,\n    borderWidth: 1 / PixelRatio.get(),\n    opacity: 0.8\n  }\n})\n\ninterface FlagType {\n  countryCode: CountryCode\n  withEmoji?: boolean\n}\n\nconst ImageFlag = memo(({ countryCode }: FlagType) => {\n  const { primaryColorVariant } = useTheme()\n  const { getImageFlag } = useContext()\n\n  return (\n    <Image\n      resizeMode={'contain'}\n      style={[styles.imageFlag, { borderColor: primaryColorVariant }]}\n      source={{ uri: getImageFlag(countryCode) }}\n    />\n  )\n})\n\nconst EmojiFlag = memo(({ countryCode }: FlagType) => {\n  const { getEmojiFlag } = useContext()\n\n  return (\n    <Text style={styles.emojiFlag} allowFontScaling={false}>\n      <Emoji name={getEmojiFlag(countryCode)} />\n    </Text>\n  )\n})\n\nexport const Flag = ({ countryCode, withEmoji }: FlagType) => (\n  <View style={styles.container}>\n    {withEmoji ? (\n      <EmojiFlag {...{ countryCode }} />\n    ) : (\n      <ImageFlag {...{ countryCode }} />\n    )}\n  </View>\n)\n\nFlag.defaultProps = {\n  withEmoji: true\n}\n","import React, { ReactNode } from 'react'\nimport { TextProps, Text } from 'react-native'\nimport { useTheme } from './CountryTheme'\n\nexport const CountryText = (props: TextProps & { children: ReactNode }) => {\n  const { fontFamily, fontSize, onBackgroundTextColor } = useTheme()\n  return (\n    <Text\n      {...props}\n      style={{ fontFamily, fontSize, color: onBackgroundTextColor }}\n    />\n  )\n}\n","import React, { memo } from 'react'\nimport { TouchableOpacity, StyleSheet, View, Platform } from 'react-native'\nimport { CountryCode } from './types'\nimport { Flag } from './Flag'\nimport { useContext } from './CountryContext'\nimport { getCountryCallingCode } from './CountryService'\nimport { CountryText } from './CountryText'\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start'\n  },\n  containerWithEmoji: {\n    marginTop: 0\n  },\n  containerWithoutEmoji: {\n    marginTop: 5\n  },\n  flagWithSomethingContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center'\n  },\n  something: { fontSize: 16 }\n})\n\ntype FlagWithSomethingProp = Pick<\n  FlagButtonProps,\n  | 'countryCode'\n  | 'withEmoji'\n  | 'withCountryNameButton'\n  | 'withCurrencyButton'\n  | 'withCallingCodeButton'\n>\n\nconst FlagWithSomething = memo(\n  ({\n    countryCode,\n    withEmoji,\n    withCountryNameButton,\n    withCurrencyButton,\n    withCallingCodeButton\n  }: FlagWithSomethingProp) => {\n    const { translation, getCountryName, getCountryCurrency } = useContext()\n    const countryName =\n      withCountryNameButton && getCountryName(countryCode, translation)\n    const currency = withCurrencyButton && getCountryCurrency(countryCode)\n    const callingCode =\n      withCallingCodeButton && getCountryCallingCode(countryCode)\n    return (\n      <View style={styles.flagWithSomethingContainer}>\n        <Flag {...{ withEmoji, countryCode }} />\n        {countryName ? (\n          <CountryText style={[styles.something]}>\n            {countryName + ' '}\n          </CountryText>\n        ) : null}\n        {currency ? (\n          <CountryText style={styles.something}>{`(${currency}) `}</CountryText>\n        ) : null}\n        {callingCode ? (\n          <CountryText\n            style={styles.something}\n          >{`+${callingCode}`}</CountryText>\n        ) : null}\n      </View>\n    )\n  }\n)\n\ninterface FlagButtonProps {\n  withEmoji?: boolean\n  withCountryNameButton?: boolean\n  withCurrencyButton?: boolean\n  withCallingCodeButton?: boolean\n  countryCode: CountryCode\n  onOpen?(): void\n}\n\nexport const FlagButton = ({\n  withEmoji,\n  withCountryNameButton,\n  withCallingCodeButton,\n  withCurrencyButton,\n  countryCode,\n  onOpen\n}: FlagButtonProps) => {\n  const withSomething =\n    withCountryNameButton || withCallingCodeButton || withCurrencyButton\n  return (\n    <TouchableOpacity activeOpacity={0.7} onPress={onOpen}>\n      <View\n        style={[\n          styles.container,\n          withEmoji ? styles.containerWithEmoji : styles.containerWithoutEmoji\n        ]}\n      >\n        {withSomething ? (\n          <FlagWithSomething\n            {...{\n              countryCode,\n              withEmoji,\n              withCountryNameButton,\n              withCallingCodeButton,\n              withCurrencyButton\n            }}\n          />\n        ) : (\n          <Flag {...{ countryCode, withEmoji }} />\n        )}\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nFlagButton.defaultProps = {\n  withEmoji: Platform.OS === 'ios',\n  withCountryNameButton: false,\n  withCallingCodeButton: false,\n  withCurrencyButton: false\n}\n","import React from 'react'\nimport { TextInput, StyleSheet, TextInputProps, Platform } from 'react-native'\nimport { useTheme } from './CountryTheme'\n\nconst styles = StyleSheet.create({\n  input: {\n    height: 48,\n    width: '70%',\n    ...Platform.select({\n      web: {\n        outlineWidth: 0,\n        outlineColor: 'transparent',\n        outlineOffset: 0\n      }\n    })\n  }\n})\n\nexport type CountryFilterProps = TextInputProps\n\nexport const CountryFilter = (props: CountryFilterProps) => {\n  const { filterPlaceholderTextColor, fontFamily, fontSize } = useTheme()\n  return (\n    <TextInput\n      testID=\"text-input-country-filter\"\n      autoCorrect={false}\n      placeholderTextColor={filterPlaceholderTextColor}\n      style={[styles.input, { fontFamily, fontSize }]}\n      {...props}\n    />\n  )\n}\n\nCountryFilter.defaultProps = {\n  autoFocus: false,\n  placeholder: 'Enter country name'\n}\n","import * as React from 'react'\nimport { ModalProps, SafeAreaView, StyleSheet } from 'react-native'\nimport { Modal } from './Modal'\nimport { useTheme } from './CountryTheme'\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n})\n\nexport const CountryModal = ({\n  children,\n  withModal,\n  ...props\n}: ModalProps & { children: React.ReactNode; withModal?: boolean }) => {\n  const { backgroundColor } = useTheme()\n  const content = (\n    <SafeAreaView style={[styles.container, { backgroundColor }]}>\n      {children}\n    </SafeAreaView>\n  )\n  if (withModal) {\n    return <Modal {...props}>{content}</Modal>\n  }\n  return content\n}\n\nCountryModal.defaultProps = {\n  animationType: 'slide',\n  animated: true,\n  withModal: true\n}\n","import React from 'react'\nimport {\n  Image,\n  TouchableNativeFeedback,\n  View,\n  Platform,\n  TouchableOpacity,\n  StyleProp,\n  ViewStyle,\n  ImageSourcePropType,\n  ImageStyle,\n  StyleSheet\n} from 'react-native'\nimport PropTypes from 'prop-types'\nimport { useTheme } from './CountryTheme'\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 48,\n    width: '15%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  imageStyle: {\n    height: 25,\n    width: 25,\n    resizeMode: 'contain'\n  }\n})\n\ninterface CloseButtonProps {\n  style?: StyleProp<ViewStyle>\n  imageStyle?: StyleProp<ImageStyle>\n  image?: ImageSourcePropType\n  onPress?(): void\n}\n\nconst CloseButtonAndroid = (props: CloseButtonProps) => {\n  let closeImage = require('./assets/images/close.android.png')\n\n  if (props.image) {\n    closeImage = props.image\n  }\n  const { onBackgroundTextColor } = useTheme()\n  return (\n    <View style={[styles.container, props.style]}>\n      <TouchableNativeFeedback\n        background={\n          Platform.Version < 21\n            ? TouchableNativeFeedback.SelectableBackground()\n            : TouchableNativeFeedback.SelectableBackgroundBorderless()\n        }\n        onPress={props.onPress}\n      >\n        <View>\n          <Image\n            source={closeImage}\n            style={[\n              styles.imageStyle,\n              props.imageStyle,\n              { tintColor: onBackgroundTextColor }\n            ]}\n          />\n        </View>\n      </TouchableNativeFeedback>\n    </View>\n  )\n}\n\nconst CloseButtonIOS = (props: CloseButtonProps) => {\n  let closeImage = require('./assets/images/close.ios.png')\n\n  if (props.image) {\n    closeImage = props.image\n  }\n  const { onBackgroundTextColor } = useTheme()\n  return (\n    <View style={[styles.container, props.style]}>\n      <TouchableOpacity onPress={props.onPress}>\n        <Image\n          source={closeImage}\n          style={[\n            styles.imageStyle,\n            props.imageStyle,\n            { tintColor: onBackgroundTextColor }\n          ]}\n        />\n      </TouchableOpacity>\n    </View>\n  )\n}\n\nconst propTypes = {\n  onPress: PropTypes.func,\n  image: PropTypes.any\n}\nCloseButtonIOS.prototype = propTypes\nCloseButtonAndroid.prototype = propTypes\n\nexport default Platform.select({\n  ios: CloseButtonIOS,\n  android: CloseButtonAndroid,\n  web: CloseButtonIOS\n})\n","import React, { ReactNode } from 'react'\nimport {\n  View,\n  StyleSheet,\n  ImageSourcePropType,\n  StyleProp,\n  ViewStyle,\n  ImageStyle\n} from 'react-native'\nimport CloseButton from './CloseButton'\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  }\n})\n\ninterface HeaderModalProps {\n  withFilter?: boolean\n  closeButtonImage?: ImageSourcePropType\n  closeButtonStyle?: StyleProp<ViewStyle>\n  closeButtonImageStyle?: StyleProp<ImageStyle>\n  onClose(): void\n  renderFilter(props: HeaderModalProps): ReactNode\n}\nexport const HeaderModal = (props: HeaderModalProps) => {\n  const {\n    withFilter,\n    closeButtonImage,\n    closeButtonStyle,\n    closeButtonImageStyle,\n    onClose,\n    renderFilter\n  } = props\n  return (\n    <View style={styles.container}>\n      <CloseButton\n        image={closeButtonImage}\n        style={closeButtonStyle}\n        imageStyle={closeButtonImageStyle}\n        onPress={onClose}\n      />\n      {withFilter && renderFilter(props)}\n    </View>\n  )\n}\n","import React, { useRef, memo, useState, useEffect } from 'react'\nimport {\n  StyleSheet,\n  View,\n  FlatList,\n  ScrollView,\n  TouchableOpacity,\n  ListRenderItemInfo,\n  PixelRatio,\n  FlatListProps\n} from 'react-native'\nimport { useTheme } from './CountryTheme'\nimport { Country, Omit } from './types'\nimport { Flag } from './Flag'\nimport { useContext } from './CountryContext'\nimport { CountryText } from './CountryText'\n\nconst borderBottomWidth = 2 / PixelRatio.get()\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  letters: {\n    marginRight: 10,\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  letter: {\n    height: 23,\n    width: 20,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  letterText: {\n    textAlign: 'center'\n  },\n  itemCountry: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    paddingHorizontal: 5\n  },\n  itemCountryName: {\n    width: '90%'\n  },\n  list: {\n    flex: 1\n  },\n  sep: {\n    borderBottomWidth,\n    width: '100%'\n  }\n})\n\ninterface LetterProps {\n  letter: string\n  scrollTo(letter: string): void\n}\nconst Letter = ({ letter, scrollTo }: LetterProps) => {\n  const { fontSize, activeOpacity } = useTheme()\n  return (\n    <TouchableOpacity\n      testID={`letter-${letter}`}\n      key={letter}\n      onPress={() => scrollTo(letter)}\n      {...{ activeOpacity }}\n    >\n      <View style={styles.letter}>\n        <CountryText\n          style={[styles.letterText, { fontSize: fontSize! * 0.8 }]}\n          allowFontScaling={false}\n        >\n          {letter}\n        </CountryText>\n      </View>\n    </TouchableOpacity>\n  )\n}\n\ninterface CountryItemProps {\n  country: Country\n  withFlag?: boolean\n  withEmoji?: boolean\n  withCallingCode?: boolean\n  withCurrency?: boolean\n  onSelect(country: Country): void\n}\nconst CountryItem = (props: CountryItemProps) => {\n  const { activeOpacity, itemHeight } = useTheme()\n  const {\n    country,\n    onSelect,\n    withFlag,\n    withEmoji,\n    withCallingCode,\n    withCurrency\n  } = props\n  const extraContent: string[] = []\n  if (\n    withCallingCode &&\n    country.callingCode &&\n    country.callingCode.length > 0\n  ) {\n    extraContent.push(`+${country.callingCode.join('|')}`)\n  }\n  if (withCurrency && country.currency && country.currency.length > 0) {\n    extraContent.push(country.currency.join('|'))\n  }\n  return (\n    <TouchableOpacity\n      key={country.cca2}\n      testID={`country-selector-${country.cca2}`}\n      onPress={() => onSelect(country)}\n      {...{ activeOpacity }}\n    >\n      <View style={[styles.itemCountry, { height: itemHeight }]}>\n        {withFlag && <Flag {...{ withEmoji, countryCode: country.cca2 }} />}\n        <View style={styles.itemCountryName}>\n          <CountryText\n            allowFontScaling={false}\n            numberOfLines={2}\n            ellipsizeMode=\"tail\"\n          >\n            {country.name}\n            {extraContent.length > 0 && ` (${extraContent.join(', ')})`}\n          </CountryText>\n        </View>\n      </View>\n    </TouchableOpacity>\n  )\n}\nCountryItem.defaultProps = {\n  withFlag: true,\n  withCallingCode: false\n}\nconst MemoCountryItem = memo<CountryItemProps>(CountryItem)\n\nconst renderItem = (props: Omit<CountryItemProps, 'country'>) => ({\n  item: country\n}: ListRenderItemInfo<Country>) => (\n  <MemoCountryItem {...{ country, ...props }} />\n)\n\ninterface CountryListProps {\n  data: Country[]\n  filter?: string\n  filterFocus?: boolean\n  withFlag?: boolean\n  withEmoji?: boolean\n  withAlphaFilter?: boolean\n  withCallingCode?: boolean\n  withCurrency?: boolean\n  flatListProps?: FlatListProps<Country>\n  onSelect(country: Country): void\n}\n\nconst keyExtractor = (item: Country) => item.cca2\n\nconst ItemSeparatorComponent = () => {\n  const { primaryColorVariant } = useTheme()\n  return (\n    <View style={[styles.sep, { borderBottomColor: primaryColorVariant }]} />\n  )\n}\n\nexport const CountryList = (props: CountryListProps) => {\n  const {\n    data,\n    withAlphaFilter,\n    withEmoji,\n    withFlag,\n    withCallingCode,\n    withCurrency,\n    onSelect,\n    filter,\n    flatListProps,\n    filterFocus\n  } = props\n  const flatListRef = useRef<FlatList<Country>>(null)\n  const [letter, setLetter] = useState<string>('')\n  const { itemHeight, backgroundColor } = useTheme()\n  const indexLetter = data\n    .map((country: Country) => (country.name as string).substr(0, 1))\n    .join('')\n\n  const scrollTo = (letter: string, animated: boolean = true) => {\n    const index = indexLetter.indexOf(letter)\n    setLetter(letter)\n    if (flatListRef.current) {\n      flatListRef.current!.scrollToIndex({ animated, index })\n    }\n  }\n  const onScrollToIndexFailed = (_info: {\n    index: number\n    highestMeasuredFrameIndex: number\n    averageItemLength: number\n  }) => {\n    if (flatListRef.current) {\n      flatListRef.current!.scrollToEnd()\n      scrollTo(letter)\n    }\n  }\n  useEffect(() => {\n    if (data && data.length > 0) {\n      scrollTo('A', false)\n    }\n  }, [filterFocus])\n  const { search, getLetters } = useContext()\n  return (\n    <View style={[styles.container, { backgroundColor }]}>\n      <FlatList\n        onScrollToIndexFailed\n        ref={flatListRef}\n        testID=\"list-countries\"\n        keyboardShouldPersistTaps=\"handled\"\n        initialNumToRender={12}\n        automaticallyAdjustContentInsets={false}\n        scrollEventThrottle={1}\n        getItemLayout={(_data: any, index) => ({\n          length: itemHeight! + borderBottomWidth,\n          offset: (itemHeight! + borderBottomWidth) * index,\n          index\n        })}\n        renderItem={renderItem({\n          withEmoji,\n          withFlag,\n          withCallingCode,\n          withCurrency,\n          onSelect\n        })}\n        {...{\n          data: search(filter, data),\n          keyExtractor,\n          onScrollToIndexFailed,\n          ItemSeparatorComponent\n        }}\n        {...flatListProps}\n      />\n      {withAlphaFilter && (\n        <ScrollView\n          contentContainerStyle={styles.letters}\n          keyboardShouldPersistTaps=\"always\"\n        >\n          {getLetters().map(letter => (\n            <Letter key={letter} {...{ letter, scrollTo }} />\n          ))}\n        </ScrollView>\n      )}\n    </View>\n  )\n}\n","import React, { ReactNode, useState, useEffect } from 'react'\nimport { ModalProps, FlatListProps } from 'react-native'\nimport { CountryModal } from './CountryModal'\nimport { HeaderModal } from './HeaderModal'\nimport { Country, CountryCode, FlagType } from './types'\nimport { CountryFilter, CountryFilterProps } from './CountryFilter'\nimport { FlagButton } from './FlagButton'\nimport { useContext } from './CountryContext'\nimport { CountryList } from './CountryList'\n\ninterface State {\n  visible: boolean\n  countries: Country[]\n  filter?: string\n  filterFocus?: boolean\n}\n\nconst renderFlagButton = (\n  props: FlagButton['props'] & CountryPickerProps['renderFlagButton']\n): ReactNode =>\n  props.renderFlagButton ? (\n    props.renderFlagButton(props)\n  ) : (\n    <FlagButton {...props} />\n  )\n\nconst renderFilter = (\n  props: CountryFilter['props'] & CountryPickerProps['renderCountryFilter']\n): ReactNode =>\n  props.renderCountryFilter ? (\n    props.renderCountryFilter(props)\n  ) : (\n    <CountryFilter {...props} />\n  )\n\ninterface CountryPickerProps {\n  countryCode: CountryCode\n  modalProps?: ModalProps\n  filterProps?: CountryFilterProps\n  flatListProps?: FlatListProps<Country>\n  withEmoji?: boolean\n  withCountryNameButton?: boolean\n  withCurrencyButton?: boolean\n  withCallingCodeButton?: boolean\n  withFilter?: boolean\n  withAlphaFilter?: boolean\n  withCallingCode?: boolean\n  withCurrency?: boolean\n  withFlag?: boolean\n  withModal?: boolean\n  visible?: boolean\n  renderFlagButton?(props: FlagButton['props']): ReactNode\n  renderCountryFilter?(props: CountryFilter['props']): ReactNode\n  onSelect(country: Country): void\n  onOpen?(): void\n  onClose?(): void\n}\n\nexport const CountryPicker = (props: CountryPickerProps) => {\n  const {\n    countryCode,\n    renderFlagButton: renderButton,\n    renderCountryFilter,\n    filterProps,\n    modalProps,\n    flatListProps,\n    onSelect,\n    withEmoji,\n    withFilter,\n    withCountryNameButton,\n    withCallingCodeButton,\n    withCurrencyButton,\n    withAlphaFilter,\n    withCallingCode,\n    withCurrency,\n    withFlag,\n    withModal,\n    onClose: handleClose,\n    onOpen: handleOpen\n  } = props\n  const [state, setState] = useState<State>({\n    visible: props.visible || false,\n    countries: [],\n    filter: '',\n    filterFocus: false\n  })\n  const { translation, getCountries } = useContext()\n  const { visible, filter, countries, filterFocus } = state\n  const onOpen = () => {\n    setState({ ...state, visible: true })\n    if (handleOpen) {\n      handleOpen()\n    }\n  }\n  const onClose = () => {\n    setState({ ...state, filter: '', visible: false })\n    if (handleClose) {\n      handleClose()\n    }\n  }\n  const setFilter = (filter: string) => setState({ ...state, filter })\n  const setCountries = (countries: Country[]) =>\n    setState({ ...state, countries })\n  const onSelectClose = (country: Country) => {\n    onSelect(country)\n    onClose()\n  }\n  const onFocus = () => setState({ ...state, filterFocus: true })\n  const onBlur = () => setState({ ...state, filterFocus: false })\n\n  const flagProp = {\n    withEmoji,\n    withCountryNameButton,\n    withCallingCodeButton,\n    withCurrencyButton,\n    countryCode,\n    renderFlagButton: renderButton,\n    onOpen\n  }\n  useEffect(() => {\n    const countries = getCountries(\n      withEmoji ? FlagType.EMOJI : FlagType.FLAT,\n      translation\n    )\n    setCountries(countries)\n  }, [translation, withEmoji])\n\n  return (\n    <>\n      {withModal && renderFlagButton(flagProp)}\n      <CountryModal\n        {...{ visible, withModal, ...modalProps }}\n        onRequestClose={onClose}\n      >\n        <HeaderModal\n          {...{ withFilter, onClose }}\n          renderFilter={(props: CountryFilter['props']) =>\n            renderFilter({\n              ...props,\n              renderCountryFilter,\n              onChangeText: setFilter,\n              value: filter,\n              onFocus,\n              onBlur,\n              ...filterProps\n            })\n          }\n        />\n        <CountryList\n          {...{\n            onSelect: onSelectClose,\n            data: countries,\n            letters: [],\n            withAlphaFilter: withAlphaFilter && filter === '',\n            withCallingCode,\n            withCurrency,\n            withFlag,\n            withEmoji,\n            filter,\n            filterFocus,\n            flatListProps\n          }}\n        />\n      </CountryModal>\n    </>\n  )\n}\n\nCountryPicker.defaultProps = {\n  withAlphaFilter: false,\n  withCallingCode: false\n}\n","import React, { ReactNode } from 'react'\nimport { FlagButton } from './FlagButton'\nimport { TranslationLanguageCode, CountryCode, Country } from './types'\nimport { CountryProvider, DEFAULT_COUNTRY_CONTEXT } from './CountryContext'\nimport { ThemeProvider, DEFAULT_THEME, Theme } from './CountryTheme'\nimport { CountryFilter, CountryFilterProps } from './CountryFilter'\nimport { ModalProps, FlatListProps } from 'react-native'\nimport { CountryPicker } from './CountryPicker'\n\ninterface Props {\n  countryCode: CountryCode\n  theme?: Theme\n  translation?: TranslationLanguageCode\n  modalProps?: ModalProps\n  filterProps?: CountryFilterProps\n  flatListProps?: FlatListProps<Country>\n  withAlphaFilter?: boolean\n  withCallingCode?: boolean\n  withCurrency?: boolean\n  withEmoji?: boolean\n  withCountryNameButton?: boolean\n  withCurrencyButton?: boolean\n  withCallingCodeButton?: boolean\n  withFilter?: boolean\n  withFlag?: boolean\n  withModal?: boolean\n  visible?: boolean\n  renderFlagButton?(props: FlagButton['props']): ReactNode\n  renderCountryFilter?(props: CountryFilter['props']): ReactNode\n  onSelect(country: Country): void\n  onOpen?(): void\n  onClose?(): void\n}\n\nexport default function main({ theme, translation, ...props }: Props) {\n  return (\n    <ThemeProvider theme={{ ...DEFAULT_THEME, ...theme }}>\n      <CountryProvider value={{ ...DEFAULT_COUNTRY_CONTEXT, translation }}>\n        <CountryPicker {...props} />\n      </CountryProvider>\n    </ThemeProvider>\n  )\n}\n\nmain.defaultProps = {\n  onSelect: () => {}\n}\n\nexport {\n  getCountries as getAllCountries,\n  getCountryCallingCode as getCallingCode\n} from './CountryService'\nexport { CountryModal } from './CountryModal'\nexport { DARK_THEME, DEFAULT_THEME } from './CountryTheme'\nexport { CountryFilter } from './CountryFilter'\nexport { CountryList } from './CountryList'\nexport { FlagButton } from './FlagButton'\nexport { HeaderModal } from './HeaderModal'\n","import * as React from 'react'\nimport { ViewProps, StyleSheet, View } from 'react-native'\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  }\n})\n\nexport const Row = (\n  props: ViewProps & { children?: React.ReactNode; fullWidth?: boolean }\n) => (\n  <View\n    {...props}\n    style={[\n      styles.row,\n      props.style,\n      props.fullWidth && {\n        width: '100%',\n        justifyContent: 'space-between',\n        padding: 10,\n        paddingHorizontal: 50\n      }\n    ]}\n  />\n)\n","import React, { useState } from 'react'\nimport {\n  Text,\n  StyleSheet,\n  PixelRatio,\n  Switch,\n  Button,\n  ScrollView\n} from 'react-native'\nimport CountryPicker from './src/'\nimport { CountryCode, Country } from './src/types'\nimport { Row } from './src/Row'\nimport { DARK_THEME } from './src/CountryTheme'\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 10,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  welcome: {\n    fontSize: 17,\n    textAlign: 'center',\n    margin: 5\n  },\n  instructions: {\n    fontSize: 10,\n    textAlign: 'center',\n    color: '#888',\n    marginBottom: 0\n  },\n  data: {\n    padding: 10,\n    marginTop: 7,\n    backgroundColor: '#ddd',\n    borderColor: '#888',\n    borderWidth: 1 / PixelRatio.get(),\n    color: '#777'\n  }\n})\n\ninterface OptionProps {\n  title: string\n  value: boolean\n  onValueChange(value: boolean): void\n}\nconst Option = ({ value, onValueChange, title }: OptionProps) => (\n  <Row fullWidth>\n    <Text style={styles.instructions}>{title}</Text>\n    <Switch {...{ value, onValueChange }} />\n  </Row>\n)\n\nexport default function App() {\n  const [countryCode, setCountryCode] = useState<CountryCode>('FR')\n  const [country, setCountry] = useState<Country>(null)\n  const [withCountryNameButton, setWithCountryNameButton] = useState<boolean>(\n    false\n  )\n  const [withCurrencyButton, setWithCurrencyButton] = useState<boolean>(false)\n  const [withCallingCodeButton, setWithCallingCodeButton] = useState<boolean>(\n    false\n  )\n\n  const [withFlag, setWithFlag] = useState<boolean>(true)\n  const [withEmoji, setWithEmoji] = useState<boolean>(true)\n  const [withFilter, setWithFilter] = useState<boolean>(true)\n  const [withAlphaFilter, setWithAlphaFilter] = useState<boolean>(false)\n  const [withCallingCode, setWithCallingCode] = useState<boolean>(false)\n  const [withCurrency, setWithCurrency] = useState<boolean>(false)\n  const [withModal, setWithModal] = useState<boolean>(true)\n  const [visible, setVisible] = useState<boolean>(false)\n  const [dark, setDark] = useState<boolean>(false)\n  const onSelect = (country: Country) => {\n    setCountryCode(country.cca2)\n    setCountry(country)\n  }\n  const switchVisible = () => setVisible(!visible)\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <Text style={styles.welcome}>Welcome to Country Picker !</Text>\n      <Option\n        title=\"With country name on button\"\n        value={withCountryNameButton}\n        onValueChange={setWithCountryNameButton}\n      />\n      <Option\n        title=\"With currency on button\"\n        value={withCurrencyButton}\n        onValueChange={setWithCurrencyButton}\n      />\n      <Option\n        title=\"With calling code on button\"\n        value={withCallingCodeButton}\n        onValueChange={setWithCallingCodeButton}\n      />\n      <Option title=\"With flag\" value={withFlag} onValueChange={setWithFlag} />\n      <Option\n        title=\"With emoji\"\n        value={withEmoji}\n        onValueChange={setWithEmoji}\n      />\n      <Option\n        title=\"With filter\"\n        value={withFilter}\n        onValueChange={setWithFilter}\n      />\n      <Option\n        title=\"With calling code\"\n        value={withCallingCode}\n        onValueChange={setWithCallingCode}\n      />\n      <Option\n        title=\"With currency\"\n        value={withCurrency}\n        onValueChange={setWithCurrency}\n      />\n      <Option\n        title=\"With alpha filter code\"\n        value={withAlphaFilter}\n        onValueChange={setWithAlphaFilter}\n      />\n      <Option\n        title=\"With modal\"\n        value={withModal}\n        onValueChange={setWithModal}\n      />\n      <Option title=\"With dark theme\" value={dark} onValueChange={setDark} />\n      <CountryPicker\n        translation=\"ita\"\n        theme={dark ? DARK_THEME : undefined}\n        {...{\n          countryCode,\n          withFilter,\n          withFlag,\n          withCurrencyButton,\n          withCallingCodeButton,\n          withCountryNameButton,\n          withAlphaFilter,\n          withCallingCode,\n          withCurrency,\n          withEmoji,\n          withModal,\n          onSelect,\n          modalProps: {\n            visible\n          },\n          onClose: () => setVisible(false),\n          onOpen: () => setVisible(true)\n        }}\n      />\n      <Text style={styles.instructions}>Press on the flag to open modal</Text>\n      <Button\n        title={'Open modal from outside using visible props'}\n        onPress={() => switchVisible()}\n      />\n      {country !== null && (\n        <Text style={styles.data}>{JSON.stringify(country, null, 0)}</Text>\n      )}\n    </ScrollView>\n  )\n}\n","module.exports = __webpack_public_path__ + \"static/media/close.android.12466ff3.png\";","module.exports = __webpack_public_path__ + \"static/media/close.ios.0dc8a49d.png\";"],"sourceRoot":""}