{"version":3,"sources":["/Users/carpentierxqvier/open-source/react-native-country-picker/src/types.ts","/Users/carpentierxqvier/open-source/react-native-country-picker/src/Emoji.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryService.ts","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryContext.ts","/Users/carpentierxqvier/open-source/react-native-country-picker/src/Flag.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/ratio.ts","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryTheme.ts","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryText.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/FlagButton.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryFilter.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryModal.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CloseButton.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/HeaderModal.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryList.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/CountryPicker.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/index.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/Row.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/App.tsx","/Users/carpentierxqvier/open-source/react-native-country-picker/src/assets/images/close.android.png","/Users/carpentierxqvier/open-source/react-native-country-picker/src/assets/images/close.ios.png"],"names":["FlagType","Emoji","memo","name","emoji","nodeEmoji","get","Text","allowFontScaling","CountryCodeList","data","fuse","imageJsonUrl","loadDataAsync","emojiCountries","undefined","imageCountries","dataType","EMOJI","Promise","resolve","reject","FLAT","fetch","then","response","json","remoteData","catch","require","isCountryPresent","countries","countryCode","isRegion","region","country","isSubregion","subregion","isIncluded","countryCodes","length","includes","cca2","DEFAULT_FUSE_OPTION","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","DEFAULT_COUNTRY_CONTEXT","translation","getCountryNameAsync","a","async","Error","getImageFlagAsync","flag","getEmojiFlagAsync","getCountriesAsync","flagType","countriesRaw","filter","map","sort","country1","country2","localeCompare","getCountryCallingCodeAsync","callingCode","getCountryCurrencyAsync","currency","search","options","Fuse","result","getLetters","arr","substr","toLocaleUpperCase","l1","l2","Array","from","Set","CountryContext","React","useContext","CountryProvider","Provider","Consumer","styles","StyleSheet","create","container","justifyContent","alignItems","width","marginRight","emojiFlag","borderWidth","PixelRatio","borderColor","backgroundColor","imageFlag","resizeMode","height","opacity","ImageFlag","flagSize","useState","uri","setUri","useEffect","console","error","Image","style","source","ActivityIndicator","size","EmojiFlag","setName","fontSize","Flag","withEmoji","withFlagButton","View","defaultProps","Dimensions","DEFAULT_HEIGHT","Platform","OS","percentage","DEFAULT_THEME","primaryColor","primaryColorVariant","onBackgroundTextColor","fontFamily","select","ios","android","web","filterPlaceholderTextColor","activeOpacity","itemHeight","Math","round","default","flagSizeButton","DARK_THEME","createTheming","ThemeProvider","useTheme","CountryText","props","color","containerWithEmoji","marginTop","containerWithoutEmoji","flagWithSomethingContainer","flexDirection","flexWrap","something","FlagText","FlagWithSomething","withCountryNameButton","withCurrencyButton","withCallingCodeButton","countryName","state","setState","FlagButton","containerButtonStyle","onOpen","withSomething","TouchableOpacity","onPress","input","outlineWidth","outlineColor","outlineOffset","CountryFilter","TextInput","testID","autoCorrect","placeholderTextColor","autoFocus","placeholder","flex","CountryModal","children","withModal","content","SafeAreaView","animationType","animated","imageStyle","CloseButtonAndroid","closeImage","image","TouchableNativeFeedback","background","Version","SelectableBackground","SelectableBackgroundBorderless","tintColor","CloseButtonIOS","propTypes","PropTypes","func","any","prototype","HeaderModal","withFilter","closeButtonImage","closeButtonStyle","closeButtonImageStyle","onClose","renderFilter","CloseButton","borderBottomWidth","letters","letter","letterText","textAlign","itemCountry","paddingHorizontal","itemCountryName","list","sep","Letter","scrollTo","key","CountryItem","onSelect","withFlag","withCallingCode","withCurrency","extraContent","push","join","numberOfLines","ellipsizeMode","MemoCountryItem","renderItem","item","keyExtractor","ItemSeparatorComponent","borderBottomColor","CountryList","withAlphaFilter","flatListProps","filterFocus","flatListRef","useRef","setLetter","indexLetter","index","indexOf","current","scrollToIndex","initialNumToRender","FlatList","onScrollToIndexFailed","ref","keyboardShouldPersistTaps","automaticallyAdjustContentInsets","scrollEventThrottle","getItemLayout","_data","offset","_info","scrollToEnd","ScrollView","contentContainerStyle","CountryPicker","renderButton","renderFlagButton","renderCountryFilter","filterProps","modalProps","handleClose","handleOpen","visible","setFilter","setCountries","onFocus","onBlur","flagProp","onRequestClose","onChangeText","value","main","theme","row","Row","fullWidth","padding","paddingVertical","welcome","margin","instructions","marginBottom","Option","onValueChange","title","Switch","App","setCountryCode","setCountry","setWithCountryNameButton","setWithCurrencyButton","setWithFlagButton","setWithCallingCodeButton","setWithFlag","setWithEmoji","setWithFilter","setWithAlphaFilter","setWithCallingCode","setWithCurrency","setWithModal","setVisible","dark","setDark","Button","JSON","stringify","module","exports"],"mappings":"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","file":"static/js/app.7cb88428.chunk.js","sourcesContent":["export const CountryCodeList = [\n  'AF',\n  'AL',\n  'DZ',\n  'AS',\n  'AD',\n  'AO',\n  'AI',\n  'AQ',\n  'AG',\n  'AR',\n  'AM',\n  'AW',\n  'AU',\n  'AT',\n  'AZ',\n  'BS',\n  'BH',\n  'BD',\n  'BB',\n  'BY',\n  'BE',\n  'BZ',\n  'BJ',\n  'BM',\n  'BT',\n  'BO',\n  'BA',\n  'BW',\n  'BV',\n  'BR',\n  'IO',\n  'VG',\n  'BN',\n  'BG',\n  'BF',\n  'BI',\n  'KH',\n  'CM',\n  'CA',\n  'CV',\n  'BQ',\n  'KY',\n  'CF',\n  'TD',\n  'CL',\n  'CN',\n  'CX',\n  'CC',\n  'CO',\n  'KM',\n  'CK',\n  'CR',\n  'HR',\n  'CU',\n  'CW',\n  'CY',\n  'CZ',\n  'CD',\n  'DK',\n  'DJ',\n  'DM',\n  'DO',\n  'EC',\n  'EG',\n  'SV',\n  'GQ',\n  'ER',\n  'EE',\n  'SZ',\n  'ET',\n  'FK',\n  'FO',\n  'FJ',\n  'FI',\n  'FR',\n  'GF',\n  'PF',\n  'TF',\n  'GA',\n  'GM',\n  'GE',\n  'DE',\n  'GH',\n  'GI',\n  'GR',\n  'GL',\n  'GD',\n  'GP',\n  'GU',\n  'GT',\n  'GG',\n  'GN',\n  'GW',\n  'GY',\n  'HT',\n  'HM',\n  'HN',\n  'HU',\n  'IS',\n  'IN',\n  'ID',\n  'IR',\n  'IQ',\n  'IE',\n  'IM',\n  'IL',\n  'IT',\n  'CI',\n  'JM',\n  'JP',\n  'JE',\n  'JO',\n  'KZ',\n  'KE',\n  'XK',\n  'KW',\n  'KG',\n  'LA',\n  'LV',\n  'LB',\n  'LS',\n  'LR',\n  'LY',\n  'LI',\n  'LT',\n  'LU',\n  'MO',\n  'MK',\n  'MG',\n  'MW',\n  'MY',\n  'MV',\n  'ML',\n  'MT',\n  'MH',\n  'MQ',\n  'MR',\n  'MU',\n  'YT',\n  'MX',\n  'FM',\n  'MD',\n  'MC',\n  'MN',\n  'ME',\n  'MS',\n  'MA',\n  'MZ',\n  'MM',\n  'NA',\n  'NR',\n  'NP',\n  'NL',\n  'NC',\n  'NZ',\n  'NI',\n  'NE',\n  'NG',\n  'NU',\n  'NF',\n  'KP',\n  'MP',\n  'NO',\n  'OM',\n  'PK',\n  'PW',\n  'PS',\n  'PA',\n  'PG',\n  'PY',\n  'PE',\n  'PH',\n  'PN',\n  'PL',\n  'PT',\n  'PR',\n  'QA',\n  'CG',\n  'RO',\n  'RU',\n  'RW',\n  'RE',\n  'BL',\n  'SH',\n  'KN',\n  'LC',\n  'MF',\n  'PM',\n  'VC',\n  'WS',\n  'SM',\n  'SA',\n  'SN',\n  'RS',\n  'SC',\n  'SL',\n  'SG',\n  'SX',\n  'SK',\n  'SI',\n  'SB',\n  'SO',\n  'ZA',\n  'GS',\n  'KR',\n  'SS',\n  'ES',\n  'LK',\n  'SD',\n  'SR',\n  'SJ',\n  'SE',\n  'CH',\n  'SY',\n  'ST',\n  'TW',\n  'TJ',\n  'TZ',\n  'TH',\n  'TL',\n  'TG',\n  'TK',\n  'TO',\n  'TT',\n  'TN',\n  'TR',\n  'TM',\n  'TC',\n  'TV',\n  'UG',\n  'UA',\n  'AE',\n  'GB',\n  'US',\n  'UM',\n  'VI',\n  'UY',\n  'UZ',\n  'VU',\n  'VA',\n  'VE',\n  'VN',\n  'WF',\n  'EH',\n  'YE',\n  'ZM',\n  'ZW',\n  'KI',\n  'HK',\n  'AX'\n] as const\n\nexport type CountryCode = typeof CountryCodeList[number]\n\nexport type CallingCode = string\n\nexport type CurrencyCode = string\n\nexport type TranslationLanguageCodeMap = {\n  [key in TranslationLanguageCode]: string\n}\nexport interface Country {\n  region: Region\n  subregion: Subregion\n  currency: CurrencyCode[]\n  callingCode: CallingCode[]\n  flag: string\n  name: TranslationLanguageCodeMap | string\n  cca2: CountryCode\n}\nexport const RegionList = [\n  'Africa',\n  'Americas',\n  'Antarctic',\n  'Asia',\n  'Europe',\n  'Oceania'\n] as const\nexport type Region = typeof RegionList[number]\n\nexport const SubregionList = [\n  'Southern Asia',\n  'Southern Europe',\n  'Northern Africa',\n  'Polynesia',\n  'Middle Africa',\n  'Caribbean',\n  'South America',\n  'Western Asia',\n  'Australia and New Zealand',\n  'Western Europe',\n  'Eastern Europe',\n  'Central America',\n  'Western Africa',\n  'North America',\n  'Southern Africa',\n  'Eastern Africa',\n  'South-Eastern Asia',\n  'Eastern Asia',\n  'Northern Europe',\n  'Melanesia',\n  'Micronesia',\n  'Central Asia',\n  'Central Europe'\n] as const\nexport type Subregion = typeof SubregionList[number]\n\nexport const TranslationLanguageCodeList = [\n  'common',\n  'cym',\n  'deu',\n  'fra',\n  'hrv',\n  'ita',\n  'jpn',\n  'nld',\n  'por',\n  'rus',\n  'spa',\n  'svk',\n  'fin',\n  'zho',\n  'isr'\n] as const\nexport type TranslationLanguageCode = typeof TranslationLanguageCodeList[number]\n\nexport enum FlagType {\n  FLAT = 'flat',\n  EMOJI = 'emoji'\n}\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\n","import React, { memo } from 'react'\nimport { Text } from 'react-native'\nimport nodeEmoji from 'node-emoji'\n\nconst Emoji = memo(({ name }: { name: string }) => {\n  const emoji = nodeEmoji.get(name)\n  return <Text allowFontScaling={false}>{emoji}</Text>\n})\n\nexport { Emoji }\n","import {\n  CountryCode,\n  Country,\n  TranslationLanguageCode,\n  TranslationLanguageCodeMap,\n  FlagType,\n  CountryCodeList,\n  Region,\n  Subregion\n} from './types'\nimport Fuse from 'fuse.js'\n\nconst imageJsonUrl =\n  'https://www.dropbox.com/s/raw/33tmsr0h3eggjke/countries-image.json'\n\ntype CountryMap = { [key in CountryCode]: Country }\n\ninterface DataCountry {\n  emojiCountries?: CountryMap\n  imageCountries?: CountryMap\n}\nconst localData: DataCountry = {\n  emojiCountries: undefined,\n  imageCountries: undefined\n}\n\nexport const loadDataAsync = ((data: DataCountry) => (\n  dataType: FlagType = FlagType.EMOJI\n): Promise<CountryMap> => {\n  return new Promise((resolve, reject) => {\n    switch (dataType) {\n      case FlagType.FLAT:\n        if (!data.imageCountries) {\n          fetch(imageJsonUrl)\n            .then((response: Response) => response.json())\n            .then((remoteData: any) => {\n              data.imageCountries = remoteData\n              resolve(data.imageCountries)\n            })\n            .catch(reject)\n        } else {\n          resolve(data.imageCountries)\n        }\n        break\n      default:\n        if (!data.emojiCountries) {\n          data.emojiCountries = require('./assets/data/countries-emoji.json')\n          resolve(data.emojiCountries)\n        } else {\n          resolve(data.emojiCountries)\n        }\n        break\n    }\n  })\n})(localData)\n\nexport const getEmojiFlagAsync = async (countryCode: CountryCode = 'FR') => {\n  const countries = await loadDataAsync()\n  if (!countries) {\n    throw new Error('Unable to find emoji because emojiCountries is undefined')\n  }\n  return countries[countryCode].flag\n}\n\nexport const getImageFlagAsync = async (countryCode: CountryCode = 'FR') => {\n  const countries = await loadDataAsync(FlagType.FLAT)\n  if (!countries) {\n    throw new Error('Unable to find image because imageCountries is undefined')\n  }\n  return countries[countryCode].flag\n}\n\nexport const getCountryNameAsync = async (\n  countryCode: CountryCode = 'FR',\n  translation: TranslationLanguageCode = 'common'\n) => {\n  const countries = await loadDataAsync()\n  if (!countries) {\n    throw new Error('Unable to find image because imageCountries is undefined')\n  }\n\n  return countries[countryCode].name\n    ? (countries[countryCode].name as TranslationLanguageCodeMap)[translation]\n    : (countries[countryCode].name as TranslationLanguageCodeMap)['common']\n}\n\nexport const getCountryCallingCodeAsync = async (countryCode: CountryCode) => {\n  const countries = await loadDataAsync()\n  if (!countries) {\n    throw new Error('Unable to find image because imageCountries is undefined')\n  }\n  return countries[countryCode].callingCode[0]\n}\n\nexport const getCountryCurrencyAsync = async (countryCode: CountryCode) => {\n  const countries = await loadDataAsync()\n  if (!countries) {\n    throw new Error('Unable to find image because imageCountries is undefined')\n  }\n  return countries[countryCode].currency[0]\n}\n\nconst isCountryPresent = (countries: { [key in CountryCode]: Country }) => (\n  countryCode: CountryCode\n) => !!countries[countryCode]\n\nconst isRegion = (region?: Region) => (country: Country) =>\n  region ? country.region === region : true\n\nconst isSubregion = (subregion?: Subregion) => (country: Country) =>\n  subregion ? country.subregion === subregion : true\n\nconst isIncluded = (countryCodes?: CountryCode[]) => (country: Country) =>\n  countryCodes && countryCodes.length > 0\n    ? countryCodes.includes(country.cca2)\n    : true\n\nexport const getCountriesAsync = async (\n  flagType: FlagType,\n  translation: TranslationLanguageCode = 'common',\n  region?: Region,\n  subregion?: Subregion,\n  countryCodes?: CountryCode[]\n): Promise<Country[]> => {\n  const countriesRaw = await loadDataAsync(flagType)\n  if (!countriesRaw) {\n    return []\n  }\n  const countries = CountryCodeList.filter(isCountryPresent(countriesRaw))\n    .map((cca2: CountryCode) => ({\n      cca2,\n      ...{\n        ...countriesRaw[cca2],\n        name:\n          (countriesRaw[cca2].name as TranslationLanguageCodeMap)[\n            translation\n          ] || (countriesRaw[cca2].name as TranslationLanguageCodeMap)['common']\n      }\n    }))\n    .filter(isRegion(region))\n    .filter(isSubregion(subregion))\n    .filter(isIncluded(countryCodes))\n    .sort((country1: Country, country2: Country) =>\n      (country1.name as string).localeCompare(country2.name as string)\n    )\n\n  return countries\n}\n\nconst DEFAULT_FUSE_OPTION = {\n  shouldSort: true,\n  threshold: 0.6,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  keys: ['name', 'callingCode']\n}\nlet fuse: Fuse<Country>\nexport const search = (\n  filter: string = '',\n  data: Country[] = [],\n  options: Fuse.FuseOptions<any> = DEFAULT_FUSE_OPTION\n) => {\n  if (data.length === 0) {\n    return []\n  }\n  if (!fuse) {\n    fuse = new Fuse<Country>(data, options)\n  }\n  if (filter && filter !== '') {\n    const result = fuse.search(filter)\n    return result\n  } else {\n    return data\n  }\n}\nconst uniq = (arr: any[]) => Array.from(new Set(arr))\n\nexport const getLetters = (countries: Country[]) => {\n  return uniq(\n    countries\n      .map((country: Country) =>\n        (country.name as string).substr(0, 1).toLocaleUpperCase()\n      )\n      .sort((l1: string, l2: string) => l1.localeCompare(l2))\n  )\n}\n","import * as React from 'react'\nimport { TranslationLanguageCode } from './types'\nimport {\n  getEmojiFlagAsync,\n  getImageFlagAsync,\n  getCountryNameAsync,\n  getCountriesAsync,\n  getLetters,\n  getCountryCallingCodeAsync,\n  getCountryCurrencyAsync,\n  search\n} from './CountryService'\n\nexport interface CountryContextParam {\n  translation?: TranslationLanguageCode\n  getCountryNameAsync: typeof getCountryNameAsync\n  getImageFlagAsync: typeof getImageFlagAsync\n  getEmojiFlagAsync: typeof getEmojiFlagAsync\n  getCountriesAsync: typeof getCountriesAsync\n  getLetters: typeof getLetters\n  getCountryCallingCodeAsync: typeof getCountryCallingCodeAsync\n  getCountryCurrencyAsync: typeof getCountryCurrencyAsync\n  search: typeof search\n}\nexport const DEFAULT_COUNTRY_CONTEXT = {\n  translation: 'common' as TranslationLanguageCode,\n  getCountryNameAsync,\n  getImageFlagAsync,\n  getEmojiFlagAsync,\n  getCountriesAsync,\n  getCountryCallingCodeAsync,\n  getCountryCurrencyAsync,\n  search,\n  getLetters\n}\nexport const CountryContext = React.createContext<CountryContextParam>(\n  DEFAULT_COUNTRY_CONTEXT\n)\n\nexport const useContext = () => React.useContext(CountryContext)\n\nexport const {\n  Provider: CountryProvider,\n  Consumer: CountryConsumer\n} = CountryContext\n","import React, { memo, useState, useEffect } from 'react'\nimport { Emoji } from './Emoji'\nimport { CountryCode } from './types'\nimport { useContext } from './CountryContext'\nimport {\n  Image,\n  StyleSheet,\n  PixelRatio,\n  Text,\n  View,\n  ActivityIndicator\n} from 'react-native'\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 30,\n    marginRight: 10\n  },\n  emojiFlag: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderWidth: 1 / PixelRatio.get(),\n    borderColor: 'transparent',\n    backgroundColor: 'transparent'\n  },\n  imageFlag: {\n    resizeMode: 'contain',\n    width: 25,\n    height: 19,\n    borderWidth: 1 / PixelRatio.get(),\n    opacity: 0.8\n  }\n})\n\ninterface FlagType {\n  countryCode: CountryCode\n  withEmoji?: boolean\n  withFlagButton?: boolean\n  flagSize: number\n}\n\nconst ImageFlag = memo(({ countryCode, flagSize }: FlagType) => {\n  const { getImageFlagAsync } = useContext()\n  const [uri, setUri] = useState<string | undefined>(undefined)\n\n  useEffect(() => {\n    getImageFlagAsync(countryCode)\n      .then(setUri)\n      .catch(console.error)\n  }, [countryCode])\n  if (!uri) {\n    return <ActivityIndicator size={'small'} />\n  }\n  return (\n    <Image\n      resizeMode={'contain'}\n      style={[\n        styles.imageFlag,\n        { borderColor: 'transparent', height: flagSize }\n      ]}\n      source={{ uri }}\n    />\n  )\n})\n\nconst EmojiFlag = memo(({ countryCode, flagSize }: FlagType) => {\n  const { getEmojiFlagAsync } = useContext()\n  const [name, setName] = useState<string>('')\n  useEffect(() => {\n    getEmojiFlagAsync(countryCode)\n      .then(setName)\n      .catch(console.error)\n  }, [countryCode])\n  if (!name) {\n    return <ActivityIndicator size={'small'} />\n  }\n  return (\n    <Text\n      style={[styles.emojiFlag, { fontSize: flagSize }]}\n      allowFontScaling={false}\n    >\n      <Emoji {...{ name }} />\n    </Text>\n  )\n})\n\nexport const Flag = ({\n  countryCode,\n  withEmoji,\n  withFlagButton,\n  flagSize\n}: FlagType) =>\n  withFlagButton ? (\n    <View style={styles.container}>\n      {withEmoji ? (\n        <EmojiFlag {...{ countryCode, flagSize }} />\n      ) : (\n        <ImageFlag {...{ countryCode, flagSize }} />\n      )}\n    </View>\n  ) : null\n\nFlag.defaultProps = {\n  withEmoji: true,\n  withFlagButton: true\n}\n","import { Dimensions, Platform } from 'react-native'\n\nconst { height } = Dimensions.get('window')\n\n// Remove the status bar height\n// since the modal view does not cover this area\nconst ANDROID_MINUS_HEIGHT = 24\n\nconst DEFAULT_HEIGHT =\n  Platform.OS === 'android' ? height - ANDROID_MINUS_HEIGHT : height\n\nexport const getHeightPercent = (percentage: number) =>\n  Math.round(DEFAULT_HEIGHT * (percentage / 100))\n","import { createTheming } from '@callstack/react-theme-provider'\nimport { Platform } from 'react-native'\nimport { getHeightPercent } from './ratio'\n\nexport const DEFAULT_THEME = {\n  primaryColor: '#ccc',\n  primaryColorVariant: '#eee',\n  backgroundColor: '#ffffff',\n  onBackgroundTextColor: '#000000',\n  fontSize: 16,\n  fontFamily: Platform.select({\n    ios: 'System',\n    android: 'Roboto',\n    web: 'Arial'\n  }),\n  filterPlaceholderTextColor: '#aaa',\n  activeOpacity: 0.5,\n  itemHeight: getHeightPercent(7),\n  flagSize: Platform.select({ android: 20, default: 30 }),\n  flagSizeButton: Platform.select({ android: 20, default: 30 })\n}\nexport const DARK_THEME = {\n  ...DEFAULT_THEME,\n  primaryColor: '#222',\n  primaryColorVariant: '#444',\n  backgroundColor: '#000',\n  onBackgroundTextColor: '#fff'\n}\nexport type Theme = Partial<typeof DEFAULT_THEME>\n\nconst { ThemeProvider, useTheme } = createTheming<Theme>(DEFAULT_THEME)\n\nexport { ThemeProvider, useTheme }\n","import React, { ReactNode } from 'react'\nimport { TextProps, Text } from 'react-native'\nimport { useTheme } from './CountryTheme'\n\nexport const CountryText = (props: TextProps & { children: ReactNode }) => {\n  const { fontFamily, fontSize, onBackgroundTextColor } = useTheme()\n  return (\n    <Text\n      {...props}\n      style={{ fontFamily, fontSize, color: onBackgroundTextColor }}\n    />\n  )\n}\n","import React, { memo, useState, useEffect, ReactNode } from 'react'\nimport {\n  TouchableOpacity,\n  StyleSheet,\n  View,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TextProps\n} from 'react-native'\nimport { CountryCode } from './types'\nimport { Flag } from './Flag'\nimport { useContext } from './CountryContext'\nimport { CountryText } from './CountryText'\nimport { useTheme } from './CountryTheme'\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start'\n  },\n  containerWithEmoji: {\n    marginTop: 0\n  },\n  containerWithoutEmoji: {\n    marginTop: 5\n  },\n  flagWithSomethingContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center'\n  },\n  something: { fontSize: 16 }\n})\n\ntype FlagWithSomethingProp = Pick<\n  FlagButtonProps,\n  | 'countryCode'\n  | 'withEmoji'\n  | 'withCountryNameButton'\n  | 'withCurrencyButton'\n  | 'withCallingCodeButton'\n  | 'withFlagButton'\n> & { flagSize: number }\n\nconst FlagText = (props: TextProps & { children: ReactNode }) => (\n  <CountryText {...props} style={styles.something} />\n)\n\nconst FlagWithSomething = memo(\n  ({\n    countryCode,\n    withEmoji,\n    withCountryNameButton,\n    withCurrencyButton,\n    withCallingCodeButton,\n    withFlagButton,\n    flagSize\n  }: FlagWithSomethingProp) => {\n    const {\n      translation,\n      getCountryNameAsync,\n      getCountryCurrencyAsync,\n      getCountryCallingCodeAsync\n    } = useContext()\n    const [state, setState] = useState({\n      countryName: '',\n      currency: '',\n      callingCode: ''\n    })\n    const { countryName, currency, callingCode } = state\n    useEffect(() => {\n      if (withCountryNameButton) {\n        getCountryNameAsync(countryCode, translation)\n          .then((countryName: string) => setState({ ...state, countryName }))\n          .catch(console.error)\n      }\n\n      if (withCurrencyButton) {\n        getCountryCurrencyAsync(countryCode)\n          .then((currency: string) => setState({ ...state, currency }))\n          .catch(console.error)\n      }\n\n      if (withCallingCodeButton) {\n        getCountryCallingCodeAsync(countryCode)\n          .then((callingCode: string) => setState({ ...state, callingCode }))\n          .catch(console.error)\n      }\n    }, [withCountryNameButton, withCurrencyButton, withCallingCodeButton])\n\n    return (\n      <View style={styles.flagWithSomethingContainer}>\n        <Flag\n          {...{ withEmoji, countryCode, withFlagButton, flagSize: flagSize! }}\n        />\n        {countryName ? <FlagText>{countryName + ' '}</FlagText> : null}\n        {currency ? <FlagText>{`(${currency}) `}</FlagText> : null}\n        {callingCode ? <FlagText>{`+${callingCode}`}</FlagText> : null}\n      </View>\n    )\n  }\n)\n\ninterface FlagButtonProps {\n  withEmoji?: boolean\n  withCountryNameButton?: boolean\n  withCurrencyButton?: boolean\n  withCallingCodeButton?: boolean\n  withFlagButton?: boolean\n  containerButtonStyle?: StyleProp<ViewStyle>\n  countryCode: CountryCode\n  onOpen?(): void\n}\n\nexport const FlagButton = ({\n  withEmoji,\n  withCountryNameButton,\n  withCallingCodeButton,\n  withCurrencyButton,\n  withFlagButton,\n  countryCode,\n  containerButtonStyle,\n  onOpen\n}: FlagButtonProps) => {\n  const withSomething =\n    withCountryNameButton || withCallingCodeButton || withCurrencyButton\n  const { flagSizeButton: flagSize } = useTheme()\n  return (\n    <TouchableOpacity activeOpacity={0.7} onPress={onOpen}>\n      <View\n        style={[\n          styles.container,\n          withEmoji ? styles.containerWithEmoji : styles.containerWithoutEmoji,\n          containerButtonStyle\n        ]}\n      >\n        {withSomething ? (\n          <FlagWithSomething\n            {...{\n              countryCode,\n              withEmoji,\n              withCountryNameButton,\n              withCallingCodeButton,\n              withCurrencyButton,\n              withFlagButton,\n              flagSize: flagSize!\n            }}\n          />\n        ) : (\n          <Flag\n            {...{ countryCode, withEmoji, withFlagButton, flagSize: flagSize! }}\n          />\n        )}\n      </View>\n    </TouchableOpacity>\n  )\n}\n\nFlagButton.defaultProps = {\n  withEmoji: Platform.OS === 'ios',\n  withCountryNameButton: false,\n  withCallingCodeButton: false,\n  withCurrencyButton: false,\n  withFlagButton: true\n}\n","import React from 'react'\nimport { TextInput, StyleSheet, TextInputProps, Platform } from 'react-native'\nimport { useTheme } from './CountryTheme'\n\nconst styles = StyleSheet.create({\n  input: {\n    height: 48,\n    width: '70%',\n    ...Platform.select({\n      web: {\n        outlineWidth: 0,\n        outlineColor: 'transparent',\n        outlineOffset: 0\n      }\n    })\n  }\n})\n\nexport type CountryFilterProps = TextInputProps\n\nexport const CountryFilter = (props: CountryFilterProps) => {\n  const {\n    filterPlaceholderTextColor,\n    fontFamily,\n    fontSize,\n    onBackgroundTextColor\n  } = useTheme()\n  return (\n    <TextInput\n      testID=\"text-input-country-filter\"\n      autoCorrect={false}\n      placeholderTextColor={filterPlaceholderTextColor}\n      style={[\n        styles.input,\n        { fontFamily, fontSize, color: onBackgroundTextColor }\n      ]}\n      {...props}\n    />\n  )\n}\n\nCountryFilter.defaultProps = {\n  autoFocus: false,\n  placeholder: 'Enter country name'\n}\n","import * as React from 'react'\nimport { ModalProps, SafeAreaView, StyleSheet } from 'react-native'\nimport { Modal } from './Modal'\nimport { useTheme } from './CountryTheme'\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n})\n\nexport const CountryModal = ({\n  children,\n  withModal,\n  ...props\n}: ModalProps & { children: React.ReactNode; withModal?: boolean }) => {\n  const { backgroundColor } = useTheme()\n  const content = (\n    <SafeAreaView style={[styles.container, { backgroundColor }]}>\n      {children}\n    </SafeAreaView>\n  )\n  if (withModal) {\n    return <Modal {...props}>{content}</Modal>\n  }\n  return content\n}\n\nCountryModal.defaultProps = {\n  animationType: 'slide',\n  animated: true,\n  withModal: true\n}\n","import React from 'react'\nimport {\n  Image,\n  TouchableNativeFeedback,\n  View,\n  Platform,\n  TouchableOpacity,\n  StyleProp,\n  ViewStyle,\n  ImageSourcePropType,\n  ImageStyle,\n  StyleSheet\n} from 'react-native'\nimport PropTypes from 'prop-types'\nimport { useTheme } from './CountryTheme'\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 48,\n    width: '15%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  imageStyle: {\n    height: 25,\n    width: 25,\n    resizeMode: 'contain'\n  }\n})\n\ninterface CloseButtonProps {\n  style?: StyleProp<ViewStyle>\n  imageStyle?: StyleProp<ImageStyle>\n  image?: ImageSourcePropType\n  onPress?(): void\n}\n\nconst CloseButtonAndroid = (props: CloseButtonProps) => {\n  let closeImage = require('./assets/images/close.android.png')\n\n  if (props.image) {\n    closeImage = props.image\n  }\n  const { onBackgroundTextColor } = useTheme()\n  return (\n    <View style={[styles.container, props.style]}>\n      <TouchableNativeFeedback\n        background={\n          Platform.Version < 21\n            ? TouchableNativeFeedback.SelectableBackground()\n            : TouchableNativeFeedback.SelectableBackgroundBorderless()\n        }\n        onPress={props.onPress}\n      >\n        <View>\n          <Image\n            source={closeImage}\n            style={[\n              styles.imageStyle,\n              props.imageStyle,\n              { tintColor: onBackgroundTextColor }\n            ]}\n          />\n        </View>\n      </TouchableNativeFeedback>\n    </View>\n  )\n}\n\nconst CloseButtonIOS = (props: CloseButtonProps) => {\n  let closeImage = require('./assets/images/close.ios.png')\n\n  if (props.image) {\n    closeImage = props.image\n  }\n  const { onBackgroundTextColor } = useTheme()\n  return (\n    <View style={[styles.container, props.style]}>\n      <TouchableOpacity onPress={props.onPress}>\n        <Image\n          source={closeImage}\n          style={[\n            styles.imageStyle,\n            props.imageStyle,\n            { tintColor: onBackgroundTextColor }\n          ]}\n        />\n      </TouchableOpacity>\n    </View>\n  )\n}\n\nconst propTypes = {\n  onPress: PropTypes.func,\n  image: PropTypes.any\n}\nCloseButtonIOS.prototype = propTypes\nCloseButtonAndroid.prototype = propTypes\n\nexport default Platform.select({\n  ios: CloseButtonIOS,\n  android: CloseButtonAndroid,\n  web: CloseButtonIOS\n})\n","import React, { ReactNode } from 'react'\nimport {\n  View,\n  StyleSheet,\n  ImageSourcePropType,\n  StyleProp,\n  ViewStyle,\n  ImageStyle\n} from 'react-native'\nimport CloseButton from './CloseButton'\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  }\n})\n\ninterface HeaderModalProps {\n  withFilter?: boolean\n  closeButtonImage?: ImageSourcePropType\n  closeButtonStyle?: StyleProp<ViewStyle>\n  closeButtonImageStyle?: StyleProp<ImageStyle>\n  onClose(): void\n  renderFilter(props: HeaderModalProps): ReactNode\n}\nexport const HeaderModal = (props: HeaderModalProps) => {\n  const {\n    withFilter,\n    closeButtonImage,\n    closeButtonStyle,\n    closeButtonImageStyle,\n    onClose,\n    renderFilter\n  } = props\n  return (\n    <View style={styles.container}>\n      <CloseButton\n        image={closeButtonImage}\n        style={closeButtonStyle}\n        imageStyle={closeButtonImageStyle}\n        onPress={onClose}\n      />\n      {withFilter && renderFilter(props)}\n    </View>\n  )\n}\n","import React, { useRef, memo, useState, useEffect } from 'react'\nimport {\n  StyleSheet,\n  View,\n  FlatList,\n  ScrollView,\n  TouchableOpacity,\n  ListRenderItemInfo,\n  PixelRatio,\n  FlatListProps,\n  Dimensions\n} from 'react-native'\nimport { useTheme } from './CountryTheme'\nimport { Country, Omit } from './types'\nimport { Flag } from './Flag'\nimport { useContext } from './CountryContext'\nimport { CountryText } from './CountryText'\n\nconst borderBottomWidth = 2 / PixelRatio.get()\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  letters: {\n    marginRight: 10,\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  letter: {\n    height: 23,\n    width: 20,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  letterText: {\n    textAlign: 'center'\n  },\n  itemCountry: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    paddingHorizontal: 5\n  },\n  itemCountryName: {\n    width: '90%'\n  },\n  list: {\n    flex: 1\n  },\n  sep: {\n    borderBottomWidth,\n    width: '100%'\n  }\n})\n\ninterface LetterProps {\n  letter: string\n  scrollTo(letter: string): void\n}\nconst Letter = ({ letter, scrollTo }: LetterProps) => {\n  const { fontSize, activeOpacity } = useTheme()\n  return (\n    <TouchableOpacity\n      testID={`letter-${letter}`}\n      key={letter}\n      onPress={() => scrollTo(letter)}\n      {...{ activeOpacity }}\n    >\n      <View style={styles.letter}>\n        <CountryText\n          style={[styles.letterText, { fontSize: fontSize! * 0.8 }]}\n          allowFontScaling={false}\n        >\n          {letter}\n        </CountryText>\n      </View>\n    </TouchableOpacity>\n  )\n}\n\ninterface CountryItemProps {\n  country: Country\n  withFlag?: boolean\n  withEmoji?: boolean\n  withCallingCode?: boolean\n  withCurrency?: boolean\n  onSelect(country: Country): void\n}\nconst CountryItem = (props: CountryItemProps) => {\n  const { activeOpacity, itemHeight, flagSize } = useTheme()\n  const {\n    country,\n    onSelect,\n    withFlag,\n    withEmoji,\n    withCallingCode,\n    withCurrency\n  } = props\n  const extraContent: string[] = []\n  if (\n    withCallingCode &&\n    country.callingCode &&\n    country.callingCode.length > 0\n  ) {\n    extraContent.push(`+${country.callingCode.join('|')}`)\n  }\n  if (withCurrency && country.currency && country.currency.length > 0) {\n    extraContent.push(country.currency.join('|'))\n  }\n  return (\n    <TouchableOpacity\n      key={country.cca2}\n      testID={`country-selector-${country.cca2}`}\n      onPress={() => onSelect(country)}\n      {...{ activeOpacity }}\n    >\n      <View style={[styles.itemCountry, { height: itemHeight }]}>\n        {withFlag && (\n          <Flag\n            {...{ withEmoji, countryCode: country.cca2, flagSize: flagSize! }}\n          />\n        )}\n        <View style={styles.itemCountryName}>\n          <CountryText\n            allowFontScaling={false}\n            numberOfLines={2}\n            ellipsizeMode=\"tail\"\n          >\n            {country.name}\n            {extraContent.length > 0 && ` (${extraContent.join(', ')})`}\n          </CountryText>\n        </View>\n      </View>\n    </TouchableOpacity>\n  )\n}\nCountryItem.defaultProps = {\n  withFlag: true,\n  withCallingCode: false\n}\nconst MemoCountryItem = memo<CountryItemProps>(CountryItem)\n\nconst renderItem = (props: Omit<CountryItemProps, 'country'>) => ({\n  item: country\n}: ListRenderItemInfo<Country>) => (\n  <MemoCountryItem {...{ country, ...props }} />\n)\n\ninterface CountryListProps {\n  data: Country[]\n  filter?: string\n  filterFocus?: boolean\n  withFlag?: boolean\n  withEmoji?: boolean\n  withAlphaFilter?: boolean\n  withCallingCode?: boolean\n  withCurrency?: boolean\n  flatListProps?: FlatListProps<Country>\n  onSelect(country: Country): void\n}\n\nconst keyExtractor = (item: Country) => item.cca2\n\nconst ItemSeparatorComponent = () => {\n  const { primaryColorVariant } = useTheme()\n  return (\n    <View style={[styles.sep, { borderBottomColor: primaryColorVariant }]} />\n  )\n}\n\nconst { height } = Dimensions.get('window')\n\nexport const CountryList = (props: CountryListProps) => {\n  const {\n    data,\n    withAlphaFilter,\n    withEmoji,\n    withFlag,\n    withCallingCode,\n    withCurrency,\n    onSelect,\n    filter,\n    flatListProps,\n    filterFocus\n  } = props\n\n  const flatListRef = useRef<FlatList<Country>>(null)\n  const [letter, setLetter] = useState<string>('')\n  const { itemHeight, backgroundColor } = useTheme()\n  const indexLetter = data\n    .map((country: Country) => (country.name as string).substr(0, 1))\n    .join('')\n\n  const scrollTo = (letter: string, animated: boolean = true) => {\n    const index = indexLetter.indexOf(letter)\n    setLetter(letter)\n    if (flatListRef.current) {\n      flatListRef.current!.scrollToIndex({ animated, index })\n    }\n  }\n  const onScrollToIndexFailed = (_info: {\n    index: number\n    highestMeasuredFrameIndex: number\n    averageItemLength: number\n  }) => {\n    if (flatListRef.current) {\n      flatListRef.current!.scrollToEnd()\n      scrollTo(letter)\n    }\n  }\n  const { search, getLetters } = useContext()\n  const letters = getLetters(data)\n  useEffect(() => {\n    if (data && data.length > 0 && filterFocus) {\n      scrollTo(letters[0], false)\n    }\n  }, [filterFocus])\n\n  const initialNumToRender = Math.round(height / (itemHeight || 1))\n  return (\n    <View style={[styles.container, { backgroundColor }]}>\n      <FlatList\n        onScrollToIndexFailed\n        ref={flatListRef}\n        testID=\"list-countries\"\n        keyboardShouldPersistTaps=\"handled\"\n        automaticallyAdjustContentInsets={false}\n        scrollEventThrottle={1}\n        getItemLayout={(_data: any, index) => ({\n          length: itemHeight! + borderBottomWidth,\n          offset: (itemHeight! + borderBottomWidth) * index,\n          index\n        })}\n        renderItem={renderItem({\n          withEmoji,\n          withFlag,\n          withCallingCode,\n          withCurrency,\n          onSelect\n        })}\n        {...{\n          data: search(filter, data),\n          keyExtractor,\n          onScrollToIndexFailed,\n          ItemSeparatorComponent,\n          initialNumToRender\n        }}\n        {...flatListProps}\n      />\n      {withAlphaFilter && (\n        <ScrollView\n          contentContainerStyle={styles.letters}\n          keyboardShouldPersistTaps=\"always\"\n        >\n          {letters.map(letter => (\n            <Letter key={letter} {...{ letter, scrollTo }} />\n          ))}\n        </ScrollView>\n      )}\n    </View>\n  )\n}\n\nCountryList.defaultProps = {\n  filterFocus: undefined\n}\n","import React, { ReactNode, useState, useEffect } from 'react'\nimport {\n  ModalProps,\n  FlatListProps,\n  StyleProp,\n  ViewStyle,\n  ImageSourcePropType,\n  ImageStyle\n} from 'react-native'\nimport { CountryModal } from './CountryModal'\nimport { HeaderModal } from './HeaderModal'\nimport { Country, CountryCode, FlagType, Region, Subregion } from './types'\nimport { CountryFilter, CountryFilterProps } from './CountryFilter'\nimport { FlagButton } from './FlagButton'\nimport { useContext } from './CountryContext'\nimport { CountryList } from './CountryList'\n\ninterface State {\n  visible: boolean\n  countries: Country[]\n  filter?: string\n  filterFocus?: boolean\n}\n\nconst renderFlagButton = (\n  props: FlagButton['props'] & CountryPickerProps['renderFlagButton']\n): ReactNode =>\n  props.renderFlagButton ? (\n    props.renderFlagButton(props)\n  ) : (\n    <FlagButton {...props} />\n  )\n\nconst renderFilter = (\n  props: CountryFilter['props'] & CountryPickerProps['renderCountryFilter']\n): ReactNode =>\n  props.renderCountryFilter ? (\n    props.renderCountryFilter(props)\n  ) : (\n    <CountryFilter {...props} />\n  )\n\ninterface CountryPickerProps {\n  countryCode: CountryCode\n  region?: Region\n  subregion?: Subregion\n  countryCodes?: CountryCode[]\n  modalProps?: ModalProps\n  filterProps?: CountryFilterProps\n  flatListProps?: FlatListProps<Country>\n  withEmoji?: boolean\n  withCountryNameButton?: boolean\n  withCurrencyButton?: boolean\n  withCallingCodeButton?: boolean\n  withFlagButton?: boolean\n  withFilter?: boolean\n  withAlphaFilter?: boolean\n  withCallingCode?: boolean\n  withCurrency?: boolean\n  withFlag?: boolean\n  withModal?: boolean\n  visible?: boolean\n  containerButtonStyle?: StyleProp<ViewStyle>\n  closeButtonImage?: ImageSourcePropType\n  closeButtonStyle?: StyleProp<ViewStyle>\n  closeButtonImageStyle?: StyleProp<ImageStyle>\n  renderFlagButton?(props: FlagButton['props']): ReactNode\n  renderCountryFilter?(props: CountryFilter['props']): ReactNode\n  onSelect(country: Country): void\n  onOpen?(): void\n  onClose?(): void\n}\n\nexport const CountryPicker = (props: CountryPickerProps) => {\n  const {\n    countryCode,\n    region,\n    subregion,\n    countryCodes,\n    renderFlagButton: renderButton,\n    renderCountryFilter,\n    filterProps,\n    modalProps,\n    flatListProps,\n    onSelect,\n    withEmoji,\n    withFilter,\n    withCountryNameButton,\n    withCallingCodeButton,\n    withCurrencyButton,\n    containerButtonStyle,\n    withAlphaFilter,\n    withCallingCode,\n    withCurrency,\n    withFlag,\n    withModal,\n    withFlagButton,\n    onClose: handleClose,\n    onOpen: handleOpen,\n    closeButtonImage,\n    closeButtonStyle,\n    closeButtonImageStyle\n  } = props\n  const [state, setState] = useState<State>({\n    visible: props.visible || false,\n    countries: [],\n    filter: '',\n    filterFocus: false\n  })\n  const { translation, getCountriesAsync } = useContext()\n  const { visible, filter, countries, filterFocus } = state\n  const onOpen = () => {\n    setState({ ...state, visible: true })\n    if (handleOpen) {\n      handleOpen()\n    }\n  }\n  const onClose = () => {\n    setState({ ...state, filter: '', visible: false })\n    if (handleClose) {\n      handleClose()\n    }\n  }\n  const setFilter = (filter: string) => setState({ ...state, filter })\n  const setCountries = (countries: Country[]) =>\n    setState({ ...state, countries })\n  const onSelectClose = (country: Country) => {\n    onSelect(country)\n    onClose()\n  }\n  const onFocus = () => setState({ ...state, filterFocus: true })\n  const onBlur = () => setState({ ...state, filterFocus: false })\n  const flagProp = {\n    withEmoji,\n    withCountryNameButton,\n    withCallingCodeButton,\n    withCurrencyButton,\n    withFlagButton,\n    countryCode,\n    renderFlagButton: renderButton,\n    onOpen,\n    containerButtonStyle\n  }\n  useEffect(() => {\n    getCountriesAsync(\n      withEmoji ? FlagType.EMOJI : FlagType.FLAT,\n      translation,\n      region,\n      subregion,\n      countryCodes\n    )\n      .then(setCountries)\n      .catch(console.error)\n  }, [translation, withEmoji])\n\n  return (\n    <>\n      {withModal && renderFlagButton(flagProp)}\n      <CountryModal\n        {...{ visible, withModal, ...modalProps }}\n        onRequestClose={onClose}\n      >\n        <HeaderModal\n          {...{\n            withFilter,\n            onClose,\n            closeButtonImage,\n            closeButtonImageStyle,\n            closeButtonStyle\n          }}\n          renderFilter={(props: CountryFilter['props']) =>\n            renderFilter({\n              ...props,\n              renderCountryFilter,\n              onChangeText: setFilter,\n              value: filter,\n              onFocus,\n              onBlur,\n              ...filterProps\n            })\n          }\n        />\n        <CountryList\n          {...{\n            onSelect: onSelectClose,\n            data: countries,\n            letters: [],\n            withAlphaFilter: withAlphaFilter && filter === '',\n            withCallingCode,\n            withCurrency,\n            withFlag,\n            withEmoji,\n            filter,\n            filterFocus,\n            flatListProps\n          }}\n        />\n      </CountryModal>\n    </>\n  )\n}\n\nCountryPicker.defaultProps = {\n  withModal: true,\n  withAlphaFilter: false,\n  withCallingCode: false\n}\n","import React, { ReactNode } from 'react'\nimport { FlagButton } from './FlagButton'\nimport {\n  TranslationLanguageCode,\n  CountryCode,\n  Country,\n  Region,\n  Subregion\n} from './types'\nimport { CountryProvider, DEFAULT_COUNTRY_CONTEXT } from './CountryContext'\nimport { ThemeProvider, DEFAULT_THEME, Theme } from './CountryTheme'\nimport { CountryFilter, CountryFilterProps } from './CountryFilter'\nimport { ModalProps, FlatListProps } from 'react-native'\nimport { CountryPicker } from './CountryPicker'\n\ninterface Props {\n  countryCode: CountryCode\n  region?: Region\n  subregion?: Subregion\n  countryCodes?: CountryCode[]\n  theme?: Theme\n  translation?: TranslationLanguageCode\n  modalProps?: ModalProps\n  filterProps?: CountryFilterProps\n  flatListProps?: FlatListProps<Country>\n  withAlphaFilter?: boolean\n  withCallingCode?: boolean\n  withCurrency?: boolean\n  withEmoji?: boolean\n  withCountryNameButton?: boolean\n  withCurrencyButton?: boolean\n  withCallingCodeButton?: boolean\n  withFilter?: boolean\n  withFlag?: boolean\n  withModal?: boolean\n  visible?: boolean\n  renderFlagButton?(props: FlagButton['props']): ReactNode\n  renderCountryFilter?(props: CountryFilter['props']): ReactNode\n  onSelect(country: Country): void\n  onOpen?(): void\n  onClose?(): void\n}\n\nexport default function main({ theme, translation, ...props }: Props) {\n  return (\n    <ThemeProvider theme={{ ...DEFAULT_THEME, ...theme }}>\n      <CountryProvider value={{ ...DEFAULT_COUNTRY_CONTEXT, translation }}>\n        <CountryPicker {...props} />\n      </CountryProvider>\n    </ThemeProvider>\n  )\n}\n\nmain.defaultProps = {\n  onSelect: () => {},\n  withEmoji: true\n}\n\nexport {\n  getCountriesAsync as getAllCountries,\n  getCountryCallingCodeAsync as getCallingCode\n} from './CountryService'\nexport { CountryModal } from './CountryModal'\nexport { DARK_THEME, DEFAULT_THEME } from './CountryTheme'\nexport { CountryFilter } from './CountryFilter'\nexport { CountryList } from './CountryList'\nexport { FlagButton } from './FlagButton'\nexport { HeaderModal } from './HeaderModal'\nexport * from './types'\n","import * as React from 'react'\nimport { ViewProps, StyleSheet, View } from 'react-native'\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  }\n})\n\nexport const Row = (\n  props: ViewProps & { children?: React.ReactNode; fullWidth?: boolean }\n) => (\n  <View\n    {...props}\n    style={[\n      styles.row,\n      props.style,\n      props.fullWidth && {\n        width: '100%',\n        justifyContent: 'space-between',\n        padding: 10,\n        paddingHorizontal: 50\n      }\n    ]}\n  />\n)\n","import React, { useState } from 'react'\nimport {\n  Text,\n  StyleSheet,\n  PixelRatio,\n  Switch,\n  Button,\n  ScrollView,\n  Platform\n} from 'react-native'\nimport CountryPicker from './src/'\nimport { CountryCode, Country } from './src/types'\nimport { Row } from './src/Row'\nimport { DARK_THEME } from './src/CountryTheme'\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 10,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  welcome: {\n    fontSize: 17,\n    textAlign: 'center',\n    margin: 5\n  },\n  instructions: {\n    fontSize: 10,\n    textAlign: 'center',\n    color: '#888',\n    marginBottom: 0\n  },\n  data: {\n    padding: 10,\n    marginTop: 7,\n    backgroundColor: '#ddd',\n    borderColor: '#888',\n    borderWidth: 1 / PixelRatio.get(),\n    color: '#777'\n  }\n})\n\ninterface OptionProps {\n  title: string\n  value: boolean\n  onValueChange(value: boolean): void\n}\nconst Option = ({ value, onValueChange, title }: OptionProps) => (\n  <Row fullWidth>\n    <Text style={styles.instructions}>{title}</Text>\n    <Switch {...{ value, onValueChange }} />\n  </Row>\n)\n\nexport default function App() {\n  const [countryCode, setCountryCode] = useState<CountryCode>('FR')\n  const [country, setCountry] = useState<Country>(null)\n  const [withCountryNameButton, setWithCountryNameButton] = useState<boolean>(\n    false\n  )\n  const [withCurrencyButton, setWithCurrencyButton] = useState<boolean>(false)\n  const [withFlagButton, setWithFlagButton] = useState<boolean>(true)\n  const [withCallingCodeButton, setWithCallingCodeButton] = useState<boolean>(\n    false\n  )\n\n  const [withFlag, setWithFlag] = useState<boolean>(true)\n  const [withEmoji, setWithEmoji] = useState<boolean>(true)\n  const [withFilter, setWithFilter] = useState<boolean>(true)\n  const [withAlphaFilter, setWithAlphaFilter] = useState<boolean>(false)\n  const [withCallingCode, setWithCallingCode] = useState<boolean>(false)\n  const [withCurrency, setWithCurrency] = useState<boolean>(false)\n  const [withModal, setWithModal] = useState<boolean>(true)\n  const [visible, setVisible] = useState<boolean>(false)\n  const [dark, setDark] = useState<boolean>(false)\n  const onSelect = (country: Country) => {\n    setCountryCode(country.cca2)\n    setCountry(country)\n  }\n  const switchVisible = () => setVisible(!visible)\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <Text style={styles.welcome}>Welcome to Country Picker !</Text>\n      <Option\n        title=\"With country name on button\"\n        value={withCountryNameButton}\n        onValueChange={setWithCountryNameButton}\n      />\n      <Option\n        title=\"With currency on button\"\n        value={withCurrencyButton}\n        onValueChange={setWithCurrencyButton}\n      />\n      <Option\n        title=\"With calling code on button\"\n        value={withCallingCodeButton}\n        onValueChange={setWithCallingCodeButton}\n      />\n      <Option title=\"With flag\" value={withFlag} onValueChange={setWithFlag} />\n      {Platform.OS !== 'web' && (\n        <Option\n          title=\"With emoji\"\n          value={withEmoji}\n          onValueChange={setWithEmoji}\n        />\n      )}\n      <Option\n        title=\"With filter\"\n        value={withFilter}\n        onValueChange={setWithFilter}\n      />\n      <Option\n        title=\"With calling code\"\n        value={withCallingCode}\n        onValueChange={setWithCallingCode}\n      />\n      <Option\n        title=\"With currency\"\n        value={withCurrency}\n        onValueChange={setWithCurrency}\n      />\n      <Option\n        title=\"With alpha filter code\"\n        value={withAlphaFilter}\n        onValueChange={setWithAlphaFilter}\n      />\n      <Option\n        title=\"With modal\"\n        value={withModal}\n        onValueChange={setWithModal}\n      />\n      <Option title=\"With dark theme\" value={dark} onValueChange={setDark} />\n      <Option\n        title=\"With flag button\"\n        value={withFlagButton}\n        onValueChange={setWithFlagButton}\n      />\n      <CountryPicker\n        theme={dark ? DARK_THEME : { flagSizeButton: 30, flagSize: 15 }}\n        {...{\n          countryCode,\n          withFilter,\n          withFlag,\n          withCurrencyButton,\n          withCallingCodeButton,\n          withCountryNameButton,\n          withAlphaFilter,\n          withCallingCode,\n          withCurrency,\n          withEmoji,\n          withModal,\n          withFlagButton,\n          onSelect,\n          modalProps: {\n            visible\n          },\n          onClose: () => setVisible(false),\n          onOpen: () => setVisible(true)\n        }}\n      />\n      <Text style={styles.instructions}>Press on the flag to open modal</Text>\n      <Button\n        title={'Open modal from outside using visible props'}\n        onPress={() => switchVisible()}\n      />\n      {country !== null && (\n        <Text style={styles.data}>{JSON.stringify(country, null, 0)}</Text>\n      )}\n    </ScrollView>\n  )\n}\n","module.exports = __webpack_public_path__ + \"static/media/close.android.12466ff3.png\";","module.exports = __webpack_public_path__ + \"static/media/close.ios.0dc8a49d.png\";"],"sourceRoot":""}